---
source: codegen-sdk-cst-generator/src/generator/node.rs
expression: format_cst(&node.get_struct_tokens().to_string()).unwrap()
---
"#[derive(Debug, Clone, Deserialize, Archive, Serialize, Drive)]\n#[rkyv(\n    serialize_bounds(\n        __S:rkyv::ser::Writer+rkyv::ser::Allocator,\n        __S::Error:rkyv::rancor::Source,\n    )\n)]\n#[rkyv(deserialize_bounds(__D::Error:rkyv::rancor::Source))]\n#[rkyv(\n    bytecheck(\n        bounds(__C:rkyv::validation::ArchiveContext, __C::Error:rkyv::rancor::Source)\n    )\n)]\npub struct TestNode {\n    #[drive(skip)]\n    start_byte: usize,\n    #[drive(skip)]\n    end_byte: usize,\n    #[drive(skip)]\n    _kind: std::string::String,\n    #[debug(\"[{},{}]\", start_position.row, start_position.column)]\n    #[drive(skip)]\n    start_position: Point,\n    #[debug(\"[{},{}]\", end_position.row, end_position.column)]\n    #[drive(skip)]\n    end_position: Point,\n    #[debug(ignore)]\n    #[drive(skip)]\n    buffer: Arc<Bytes>,\n    #[debug(ignore)]\n    #[drive(skip)]\n    kind_id: u16,\n    #[debug(ignore)]\n    #[drive(skip)]\n    is_error: bool,\n    #[debug(ignore)]\n    #[drive(skip)]\n    named: bool,\n    #[debug(ignore)]\n    #[drive(skip)]\n    id: usize,\n    #[rkyv(omit_bounds)]\n    pub children: Vec<TestNodeChildren>,\n}\nimpl FromNode for TestNode {\n    fn from_node(\n        node: tree_sitter::Node,\n        buffer: &Arc<Bytes>,\n    ) -> Result<Self, ParseError> {\n        Ok(Self {\n            start_byte: node.start_byte(),\n            end_byte: node.end_byte(),\n            _kind: node.kind().to_string(),\n            start_position: node.start_position().into(),\n            end_position: node.end_position().into(),\n            buffer: buffer.clone(),\n            kind_id: node.kind_id(),\n            is_error: node.is_error(),\n            named: node.is_named(),\n            id: node.id(),\n            children: named_children_without_field_names(node, buffer)?,\n        })\n    }\n}\nimpl CSTNode for TestNode {\n    fn kind(&self) -> &str {\n        &self._kind\n    }\n    fn start_byte(&self) -> usize {\n        self.start_byte\n    }\n    fn end_byte(&self) -> usize {\n        self.end_byte\n    }\n    fn start_position(&self) -> Point {\n        self.start_position\n    }\n    fn end_position(&self) -> Point {\n        self.end_position\n    }\n    fn buffer(&self) -> &Bytes {\n        &self.buffer\n    }\n    fn kind_id(&self) -> u16 {\n        self.kind_id\n    }\n    fn is_error(&self) -> bool {\n        self.is_error\n    }\n    fn is_named(&self) -> bool {\n        self.named\n    }\n    fn id(&self) -> usize {\n        self.id\n    }\n}\nimpl HasChildren for TestNode {\n    type Child = TestNodeChildren;\n    fn children(&self) -> Vec<Self::Child> {\n        let children: Vec<_> = self.children.iter().cloned().collect();\n        children\n    }\n    fn children_by_field_name(&self, field_name: &str) -> Vec<Self::Child> {\n        match field_name {\n            _ => vec![],\n        }\n    }\n    fn children_by_field_id(&self, field_id: u16) -> Vec<Self::Child> {\n        match field_id {\n            _ => vec![],\n        }\n    }\n}\n"
