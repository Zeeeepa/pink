---
source: codegen-sdk-cst-generator/src/generator/node.rs
expression: snapshot_tokens(&node.get_struct_tokens())
---
#[derive(Debug, Clone, Deserialize, Archive, Serialize, Drive)]
#[rkyv(
    serialize_bounds(
        __S:rkyv::ser::Writer+rkyv::ser::Allocator,
        __S::Error:rkyv::rancor::Source,
    )
)]
#[rkyv(deserialize_bounds(__D::Error:rkyv::rancor::Source))]
#[rkyv(
    bytecheck(
        bounds(__C:rkyv::validation::ArchiveContext, __C::Error:rkyv::rancor::Source)
    )
)]
pub struct TestNode {
    #[drive(skip)]
    start_byte: usize,
    #[drive(skip)]
    end_byte: usize,
    #[drive(skip)]
    _kind: std::string::String,
    #[debug("[{},{}]", start_position.row, start_position.column)]
    #[drive(skip)]
    start_position: Point,
    #[debug("[{},{}]", end_position.row, end_position.column)]
    #[drive(skip)]
    end_position: Point,
    #[debug(ignore)]
    #[drive(skip)]
    buffer: Arc<Bytes>,
    #[debug(ignore)]
    #[drive(skip)]
    kind_id: u16,
    #[debug(ignore)]
    #[drive(skip)]
    is_error: bool,
    #[debug(ignore)]
    #[drive(skip)]
    named: bool,
    #[debug(ignore)]
    #[drive(skip)]
    id: usize,
    #[rkyv(omit_bounds)]
    pub multiple_field: Vec<TestType>,
    #[rkyv(omit_bounds)]
    pub optional_field: Box<Option<TestType>>,
    #[rkyv(omit_bounds)]
    pub required_field: Box<TestType>,
}
impl FromNode for TestNode {
    fn from_node(
        node: tree_sitter::Node,
        buffer: &Arc<Bytes>,
    ) -> Result<Self, ParseError> {
        Ok(Self {
            start_byte: node.start_byte(),
            end_byte: node.end_byte(),
            _kind: node.kind().to_string(),
            start_position: node.start_position().into(),
            end_position: node.end_position().into(),
            buffer: buffer.clone(),
            kind_id: node.kind_id(),
            is_error: node.is_error(),
            named: node.is_named(),
            id: node.id(),
            multiple_field: get_multiple_children_by_field_name(
                &node,
                "multiple_field",
                buffer,
            )?,
            optional_field: Box::new(
                get_optional_child_by_field_name(&node, "optional_field", buffer)?,
            ),
            required_field: Box::new(
                get_child_by_field_name(&node, "required_field", buffer)?,
            ),
        })
    }
}
impl CSTNode for TestNode {
    fn kind(&self) -> &str {
        &self._kind
    }
    fn start_byte(&self) -> usize {
        self.start_byte
    }
    fn end_byte(&self) -> usize {
        self.end_byte
    }
    fn start_position(&self) -> Point {
        self.start_position
    }
    fn end_position(&self) -> Point {
        self.end_position
    }
    fn buffer(&self) -> &Bytes {
        &self.buffer
    }
    fn kind_id(&self) -> u16 {
        self.kind_id
    }
    fn is_error(&self) -> bool {
        self.is_error
    }
    fn is_named(&self) -> bool {
        self.named
    }
    fn id(&self) -> usize {
        self.id
    }
}
impl HasChildren for TestNode {
    type Child = TestNodeChildren;
    fn children(&self) -> Vec<Self::Child> {
        let mut children: Vec<_> = vec![];
        children
            .extend(
                self
                    .multiple_field
                    .iter()
                    .map(|child| {
                        Self::Child::try_from(NodeTypes::from(child.clone())).unwrap()
                    }),
            );
        if let Some(child) = self.optional_field.as_ref() {
            children
                .push(Self::Child::try_from(NodeTypes::from(child.clone())).unwrap());
        }
        children
            .push(
                Self::Child::try_from(
                        NodeTypes::from(self.required_field.as_ref().clone()),
                    )
                    .unwrap(),
            );
        children
    }
    fn children_by_field_name(&self, field_name: &str) -> Vec<Self::Child> {
        match field_name {
            "multiple_field" => {
                self.multiple_field
                    .iter()
                    .map(|child| {
                        Self::Child::try_from(NodeTypes::from(child.clone())).unwrap()
                    })
                    .collect()
            }
            "optional_field" => {
                self.optional_field
                    .as_ref()
                    .iter()
                    .map(|child| {
                        Self::Child::try_from(NodeTypes::from(child.clone())).unwrap()
                    })
                    .collect()
            }
            "required_field" => {
                vec![
                    Self::Child::try_from(NodeTypes::from(self.required_field.as_ref()
                    .clone())).unwrap()
                ]
            }
            _ => vec![],
        }
    }
    fn children_by_field_id(&self, field_id: u16) -> Vec<Self::Child> {
        match field_id {
            1u16 => {
                self.multiple_field
                    .iter()
                    .map(|child| {
                        Self::Child::try_from(NodeTypes::from(child.clone())).unwrap()
                    })
                    .collect()
            }
            1u16 => {
                self.optional_field
                    .as_ref()
                    .iter()
                    .map(|child| {
                        Self::Child::try_from(NodeTypes::from(child.clone())).unwrap()
                    })
                    .collect()
            }
            1u16 => {
                vec![
                    Self::Child::try_from(NodeTypes::from(self.required_field.as_ref()
                    .clone())).unwrap()
                ]
            }
            _ => vec![],
        }
    }
}
