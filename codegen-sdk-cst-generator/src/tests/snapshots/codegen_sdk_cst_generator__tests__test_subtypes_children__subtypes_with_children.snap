---
source: codegen-sdk-cst-generator/src/tests/test_subtypes_children.rs
expression: "crate::test_util::snapshot_string(&output)"
---
use std::sync::Arc;
use tree_sitter;
use codegen_sdk_common::*;
use subenum::subenum;
use std::backtrace::Backtrace;
use bytes::Bytes;
use derive_generic_visitor::Drive;
use ambassador::Delegate;
use codegen_sdk_cst::CSTLanguage;
use codegen_sdk_common::language::Language;
#[subenum(BlockChildren, IfStatementChildren, Statement)]
#[derive(Debug, Clone, Eq, PartialEq, Drive, Hash, salsa::Update, Delegate)]
#[delegate(CSTNode<'db1>)]
pub enum NodeTypes<'db1> {
    #[subenum(IfStatementChildren)]
    Block(Block<'db1>),
    #[subenum(Statement, BlockChildren)]
    IfStatement(IfStatement<'db1>),
    #[subenum(Statement, BlockChildren)]
    ReturnStatement(ReturnStatement<'db1>),
}
impl<'db3> From<Block<'db3>> for NodeTypes<'db3> {
    fn from(node: Block<'db3>) -> Self {
        Self::Block(node)
    }
}
impl<'db3> From<IfStatement<'db3>> for NodeTypes<'db3> {
    fn from(node: IfStatement<'db3>) -> Self {
        Self::IfStatement(node)
    }
}
impl<'db3> From<ReturnStatement<'db3>> for NodeTypes<'db3> {
    fn from(node: ReturnStatement<'db3>) -> Self {
        Self::ReturnStatement(node)
    }
}
impl<'db4> FromNode<'db4> for BlockChildren<'db4> {
    fn from_node(
        db: &'db4 dyn salsa::Database,
        node: tree_sitter::Node,
        buffer: &Arc<Bytes>,
    ) -> Result<Self, ParseError> {
        match node.kind_id() {
            0u16 => {
                Ok(Self::ReturnStatement(ReturnStatement::from_node(db, node, buffer)?))
            }
            _ => {
                Err(ParseError::UnexpectedNode {
                    node_type: node.kind().to_string(),
                    backtrace: Backtrace::capture(),
                })
            }
        }
    }
}
impl<'db4> FromNode<'db4> for IfStatementChildren<'db4> {
    fn from_node(
        db: &'db4 dyn salsa::Database,
        node: tree_sitter::Node,
        buffer: &Arc<Bytes>,
    ) -> Result<Self, ParseError> {
        match node.kind_id() {
            0u16 => Ok(Self::Block(Block::from_node(db, node, buffer)?)),
            _ => {
                Err(ParseError::UnexpectedNode {
                    node_type: node.kind().to_string(),
                    backtrace: Backtrace::capture(),
                })
            }
        }
    }
}
impl<'db4> FromNode<'db4> for Statement<'db4> {
    fn from_node(
        db: &'db4 dyn salsa::Database,
        node: tree_sitter::Node,
        buffer: &Arc<Bytes>,
    ) -> Result<Self, ParseError> {
        match node.kind_id() {
            0u16 => {
                Ok(Self::ReturnStatement(ReturnStatement::from_node(db, node, buffer)?))
            }
            _ => {
                Err(ParseError::UnexpectedNode {
                    node_type: node.kind().to_string(),
                    backtrace: Backtrace::capture(),
                })
            }
        }
    }
}
#[derive(Debug, Clone, Drive, Eq, PartialEq, salsa::Update)]
pub struct Block<'db> {
    #[drive(skip)]
    start_byte: usize,
    #[drive(skip)]
    end_byte: usize,
    #[drive(skip)]
    _kind: std::string::String,
    #[drive(skip)]
    start_position: Point<'db>,
    #[drive(skip)]
    end_position: Point<'db>,
    #[drive(skip)]
    buffer: Arc<Bytes>,
    #[drive(skip)]
    kind_id: u16,
    #[drive(skip)]
    is_error: bool,
    #[drive(skip)]
    named: bool,
    #[drive(skip)]
    id: usize,
    pub _children: Vec<BlockChildren<'db>>,
}
impl<'db> FromNode<'db> for Block<'db> {
    fn from_node(
        db: &'db dyn salsa::Database,
        node: tree_sitter::Node,
        buffer: &Arc<Bytes>,
    ) -> Result<Self, ParseError> {
        let start_position = Point::from(db, node.start_position());
        let end_position = Point::from(db, node.end_position());
        Ok(Self {
            start_byte: node.start_byte(),
            end_byte: node.end_byte(),
            _kind: node.kind().to_string(),
            start_position: start_position,
            end_position: end_position,
            buffer: buffer.clone(),
            kind_id: node.kind_id(),
            is_error: node.is_error(),
            named: node.is_named(),
            id: node.id(),
            _children: named_children_without_field_names(db, node, buffer)?,
        })
    }
}
impl<'db> CSTNode<'db> for Block<'db> {
    fn kind(&self) -> &str {
        &self._kind
    }
    fn start_byte(&self) -> usize {
        self.start_byte
    }
    fn end_byte(&self) -> usize {
        self.end_byte
    }
    fn start_position(&self) -> Point<'db> {
        self.start_position
    }
    fn end_position(&self) -> Point<'db> {
        self.end_position
    }
    fn buffer(&self) -> &Bytes {
        &self.buffer
    }
    fn kind_id(&self) -> u16 {
        self.kind_id
    }
    fn is_error(&self) -> bool {
        self.is_error
    }
    fn is_named(&self) -> bool {
        self.named
    }
    fn id(&self) -> usize {
        self.id
    }
}
impl<'db1> HasChildren<'db1> for Block<'db1> {
    type Child = BlockChildren<'db1>;
    fn children(&self) -> Vec<Self::Child> {
        let mut children: Vec<_> = self._children.iter().cloned().collect();
        children.sort_by_key(|c| c.start_byte());
        children
    }
    fn children_by_field_name(&self, field_name: &str) -> Vec<Self::Child> {
        match field_name {
            _ => vec![],
        }
    }
    fn children_by_field_id(&self, field_id: u16) -> Vec<Self::Child> {
        match field_id {
            _ => vec![],
        }
    }
}
impl<'db> std::hash::Hash for Block<'db> {
    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        self.id.hash(state);
    }
}
#[derive(Debug, Clone, Drive, Eq, PartialEq, salsa::Update)]
pub struct IfStatement<'db> {
    #[drive(skip)]
    start_byte: usize,
    #[drive(skip)]
    end_byte: usize,
    #[drive(skip)]
    _kind: std::string::String,
    #[drive(skip)]
    start_position: Point<'db>,
    #[drive(skip)]
    end_position: Point<'db>,
    #[drive(skip)]
    buffer: Arc<Bytes>,
    #[drive(skip)]
    kind_id: u16,
    #[drive(skip)]
    is_error: bool,
    #[drive(skip)]
    named: bool,
    #[drive(skip)]
    id: usize,
    pub _children: Vec<IfStatementChildren<'db>>,
}
impl<'db> FromNode<'db> for IfStatement<'db> {
    fn from_node(
        db: &'db dyn salsa::Database,
        node: tree_sitter::Node,
        buffer: &Arc<Bytes>,
    ) -> Result<Self, ParseError> {
        let start_position = Point::from(db, node.start_position());
        let end_position = Point::from(db, node.end_position());
        Ok(Self {
            start_byte: node.start_byte(),
            end_byte: node.end_byte(),
            _kind: node.kind().to_string(),
            start_position: start_position,
            end_position: end_position,
            buffer: buffer.clone(),
            kind_id: node.kind_id(),
            is_error: node.is_error(),
            named: node.is_named(),
            id: node.id(),
            _children: named_children_without_field_names(db, node, buffer)?,
        })
    }
}
impl<'db> CSTNode<'db> for IfStatement<'db> {
    fn kind(&self) -> &str {
        &self._kind
    }
    fn start_byte(&self) -> usize {
        self.start_byte
    }
    fn end_byte(&self) -> usize {
        self.end_byte
    }
    fn start_position(&self) -> Point<'db> {
        self.start_position
    }
    fn end_position(&self) -> Point<'db> {
        self.end_position
    }
    fn buffer(&self) -> &Bytes {
        &self.buffer
    }
    fn kind_id(&self) -> u16 {
        self.kind_id
    }
    fn is_error(&self) -> bool {
        self.is_error
    }
    fn is_named(&self) -> bool {
        self.named
    }
    fn id(&self) -> usize {
        self.id
    }
}
impl<'db1> HasChildren<'db1> for IfStatement<'db1> {
    type Child = IfStatementChildren<'db1>;
    fn children(&self) -> Vec<Self::Child> {
        let mut children: Vec<_> = self._children.iter().cloned().collect();
        children.sort_by_key(|c| c.start_byte());
        children
    }
    fn children_by_field_name(&self, field_name: &str) -> Vec<Self::Child> {
        match field_name {
            _ => vec![],
        }
    }
    fn children_by_field_id(&self, field_id: u16) -> Vec<Self::Child> {
        match field_id {
            _ => vec![],
        }
    }
}
impl<'db> std::hash::Hash for IfStatement<'db> {
    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        self.id.hash(state);
    }
}
#[derive(Debug, Clone, Drive, Eq, PartialEq, salsa::Update)]
pub struct ReturnStatement<'db> {
    #[drive(skip)]
    start_byte: usize,
    #[drive(skip)]
    end_byte: usize,
    #[drive(skip)]
    _kind: std::string::String,
    #[drive(skip)]
    start_position: Point<'db>,
    #[drive(skip)]
    end_position: Point<'db>,
    #[drive(skip)]
    buffer: Arc<Bytes>,
    #[drive(skip)]
    kind_id: u16,
    #[drive(skip)]
    is_error: bool,
    #[drive(skip)]
    named: bool,
    #[drive(skip)]
    id: usize,
}
impl<'db> FromNode<'db> for ReturnStatement<'db> {
    fn from_node(
        db: &'db dyn salsa::Database,
        node: tree_sitter::Node,
        buffer: &Arc<Bytes>,
    ) -> Result<Self, ParseError> {
        let start_position = Point::from(db, node.start_position());
        let end_position = Point::from(db, node.end_position());
        Ok(Self {
            start_byte: node.start_byte(),
            end_byte: node.end_byte(),
            _kind: node.kind().to_string(),
            start_position: start_position,
            end_position: end_position,
            buffer: buffer.clone(),
            kind_id: node.kind_id(),
            is_error: node.is_error(),
            named: node.is_named(),
            id: node.id(),
        })
    }
}
impl<'db> CSTNode<'db> for ReturnStatement<'db> {
    fn kind(&self) -> &str {
        &self._kind
    }
    fn start_byte(&self) -> usize {
        self.start_byte
    }
    fn end_byte(&self) -> usize {
        self.end_byte
    }
    fn start_position(&self) -> Point<'db> {
        self.start_position
    }
    fn end_position(&self) -> Point<'db> {
        self.end_position
    }
    fn buffer(&self) -> &Bytes {
        &self.buffer
    }
    fn kind_id(&self) -> u16 {
        self.kind_id
    }
    fn is_error(&self) -> bool {
        self.is_error
    }
    fn is_named(&self) -> bool {
        self.named
    }
    fn id(&self) -> usize {
        self.id
    }
}
impl<'db1> HasChildren<'db1> for ReturnStatement<'db1> {
    type Child = Self;
    fn children(&self) -> Vec<Self::Child> {
        vec![]
    }
    fn children_by_field_name(&self, field_name: &str) -> Vec<Self::Child> {
        match field_name {
            _ => vec![],
        }
    }
    fn children_by_field_id(&self, field_id: u16) -> Vec<Self::Child> {
        match field_id {
            _ => vec![],
        }
    }
}
impl<'db> std::hash::Hash for ReturnStatement<'db> {
    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        self.id.hash(state);
    }
}
#[salsa::tracked]
pub struct Parsed<'db> {
    #[tracked]
    #[return_ref]
    pub program: Option<Program<'db>>,
}
pub fn parse_program_raw(
    db: &dyn salsa::Database,
    input: codegen_sdk_cst::Input,
) -> Option<Program<'_>> {
    let buffer = Bytes::from(input.content(db).as_bytes().to_vec());
    let tree = codegen_sdk_common::language::language::Language
        .parse_tree_sitter(&input.content(db));
    match tree {
        Ok(tree) => {
            if tree.root_node().has_error() {
                ParseError::SyntaxError.report(db);
                None
            } else {
                let buffer = Arc::new(buffer);
                Program::from_node(db, tree.root_node(), &buffer)
                    .map_or_else(
                        |e| {
                            e.report(db);
                            None
                        },
                        |program| { Some(program) },
                    )
            }
        }
        Err(e) => {
            e.report(db);
            None
        }
    }
}
#[salsa::tracked]
pub fn parse_program(
    db: &dyn salsa::Database,
    input: codegen_sdk_cst::Input,
) -> Parsed<'_> {
    Parsed::new(db, parse_program_raw(db, input))
}
pub struct Language;
impl CSTLanguage for Language {
    type Program<'db> = Program<'db>;
    fn language() -> &'static Language {
        &codegen_sdk_common::language::language::Language
    }
    fn parse<'db>(
        db: &'db dyn salsa::Database,
        content: std::string::String,
    ) -> &'db Option<Self::Program<'db>> {
        let input = codegen_sdk_cst::Input::new(db, content);
        return parse_program(db, input).program(db);
    }
}
