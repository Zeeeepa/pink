---
source: codegen-bindings-generator/src/python/generator.rs
expression: format_code(&output).unwrap()
---
#[pyclass(module = "codegen_sdk_pink.python")]
pub struct PythonFile {
    path: PathBuf,
    codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
}
impl PythonFile {
    pub fn new(
        path: PathBuf,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    ) -> Self {
        Self { path, codebase }
    }
    fn file<'db>(
        &'db self,
        py: Python<'db>,
    ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>> {
        let codebase = self.codebase.get(py);
        if let codegen_sdk_analyzer::ParsedFile::Python(file) = codebase
            .get_file(&self.path)
            .unwrap()
        {
            Ok(file)
        } else {
            Err(
                pyo3::exceptions::PyValueError::new_err(
                    format!("File not found at {}", self.path.display()),
                ),
            )
        }
    }
}
#[pymethods]
impl PythonFile {
    #[getter]
    pub fn path(&self) -> &PathBuf {
        &self.path
    }
    #[getter]
    pub fn content(&self, py: Python<'_>) -> PyResult<std::string::String> {
        let codebase = self.codebase.get(py);
        let file = self.file(py)?.root(codebase.db());
        Ok(file.source())
    }
    #[getter]
    pub fn content_bytes(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
        let codebase = self.codebase.get(py);
        let file = self.file(py)?.root(codebase.db());
        Ok(pyo3_bytes::PyBytes::new(file.text()))
    }
    fn __str__(&self, py: Python<'_>) -> PyResult<String> {
        Ok(self.content(py)?.to_string())
    }
    #[getter]
    pub fn classes(&self, py: Python<'_>) -> PyResult<Vec<Class>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.definitions(db);
        let subcategory = category.classes(db);
        let nodes = subcategory
            .values()
            .map(|values| {
                values
                    .into_iter()
                    .enumerate()
                    .map(|(idx, node)| Class::new(
                        node.fully_qualified_name(db),
                        idx,
                        self.codebase.clone(),
                    ))
            })
            .flatten()
            .collect();
        Ok(nodes)
    }
    #[pyo3(signature = (name, optional = false))]
    pub fn get_class(
        &self,
        py: Python<'_>,
        name: String,
        optional: bool,
    ) -> PyResult<Option<Class>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.definitions(db);
        let subcategory = category.classes(db);
        let res = subcategory.get(&name);
        if let Some(nodes) = res {
            if nodes.len() == 1 {
                Ok(
                    Some(
                        Class::new(
                            nodes[0].fully_qualified_name(db),
                            0,
                            self.codebase.clone(),
                        ),
                    ),
                )
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "Ambiguous symbol {} found {} possible matches", name, nodes
                            .len()
                        ),
                    ),
                )
            }
        } else {
            if optional {
                Ok(None)
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!("No symbol {} found", name),
                    ),
                )
            }
        }
    }
    #[getter]
    pub fn constants(&self, py: Python<'_>) -> PyResult<Vec<Constant>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.definitions(db);
        let subcategory = category.constants(db);
        let nodes = subcategory
            .values()
            .map(|values| {
                values
                    .into_iter()
                    .enumerate()
                    .map(|(idx, node)| Constant::new(
                        node.fully_qualified_name(db),
                        idx,
                        self.codebase.clone(),
                    ))
            })
            .flatten()
            .collect();
        Ok(nodes)
    }
    #[pyo3(signature = (name, optional = false))]
    pub fn get_constant(
        &self,
        py: Python<'_>,
        name: String,
        optional: bool,
    ) -> PyResult<Option<Constant>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.definitions(db);
        let subcategory = category.constants(db);
        let res = subcategory.get(&name);
        if let Some(nodes) = res {
            if nodes.len() == 1 {
                Ok(
                    Some(
                        Constant::new(
                            nodes[0].fully_qualified_name(db),
                            0,
                            self.codebase.clone(),
                        ),
                    ),
                )
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "Ambiguous symbol {} found {} possible matches", name, nodes
                            .len()
                        ),
                    ),
                )
            }
        } else {
            if optional {
                Ok(None)
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!("No symbol {} found", name),
                    ),
                )
            }
        }
    }
    #[getter]
    pub fn functions(&self, py: Python<'_>) -> PyResult<Vec<Function>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.definitions(db);
        let subcategory = category.functions(db);
        let nodes = subcategory
            .values()
            .map(|values| {
                values
                    .into_iter()
                    .enumerate()
                    .map(|(idx, node)| Function::new(
                        node.fully_qualified_name(db),
                        idx,
                        self.codebase.clone(),
                    ))
            })
            .flatten()
            .collect();
        Ok(nodes)
    }
    #[pyo3(signature = (name, optional = false))]
    pub fn get_function(
        &self,
        py: Python<'_>,
        name: String,
        optional: bool,
    ) -> PyResult<Option<Function>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.definitions(db);
        let subcategory = category.functions(db);
        let res = subcategory.get(&name);
        if let Some(nodes) = res {
            if nodes.len() == 1 {
                Ok(
                    Some(
                        Function::new(
                            nodes[0].fully_qualified_name(db),
                            0,
                            self.codebase.clone(),
                        ),
                    ),
                )
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "Ambiguous symbol {} found {} possible matches", name, nodes
                            .len()
                        ),
                    ),
                )
            }
        } else {
            if optional {
                Ok(None)
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!("No symbol {} found", name),
                    ),
                )
            }
        }
    }
    #[getter]
    pub fn imports(&self, py: Python<'_>) -> PyResult<Vec<Import>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.definitions(db);
        let subcategory = category.imports(db);
        let nodes = subcategory
            .values()
            .map(|values| {
                values
                    .into_iter()
                    .enumerate()
                    .map(|(idx, node)| Import::new(
                        node.fully_qualified_name(db),
                        idx,
                        self.codebase.clone(),
                    ))
            })
            .flatten()
            .collect();
        Ok(nodes)
    }
    #[pyo3(signature = (name, optional = false))]
    pub fn get_import(
        &self,
        py: Python<'_>,
        name: String,
        optional: bool,
    ) -> PyResult<Option<Import>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.definitions(db);
        let subcategory = category.imports(db);
        let res = subcategory.get(&name);
        if let Some(nodes) = res {
            if nodes.len() == 1 {
                Ok(
                    Some(
                        Import::new(
                            nodes[0].fully_qualified_name(db),
                            0,
                            self.codebase.clone(),
                        ),
                    ),
                )
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "Ambiguous symbol {} found {} possible matches", name, nodes
                            .len()
                        ),
                    ),
                )
            }
        } else {
            if optional {
                Ok(None)
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!("No symbol {} found", name),
                    ),
                )
            }
        }
    }
    #[getter]
    pub fn calls(&self, py: Python<'_>) -> PyResult<Vec<Call>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.references(db);
        let subcategory = category.calls(db);
        let nodes = subcategory
            .values()
            .map(|values| {
                values
                    .into_iter()
                    .enumerate()
                    .map(|(idx, node)| Call::new(
                        node.fully_qualified_name(db),
                        idx,
                        self.codebase.clone(),
                    ))
            })
            .flatten()
            .collect();
        Ok(nodes)
    }
    #[pyo3(signature = (name, optional = false))]
    pub fn get_call(
        &self,
        py: Python<'_>,
        name: String,
        optional: bool,
    ) -> PyResult<Option<Call>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.references(db);
        let subcategory = category.calls(db);
        let res = subcategory.get(&name);
        if let Some(nodes) = res {
            if nodes.len() == 1 {
                Ok(
                    Some(
                        Call::new(
                            nodes[0].fully_qualified_name(db),
                            0,
                            self.codebase.clone(),
                        ),
                    ),
                )
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "Ambiguous symbol {} found {} possible matches", name, nodes
                            .len()
                        ),
                    ),
                )
            }
        } else {
            if optional {
                Ok(None)
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!("No symbol {} found", name),
                    ),
                )
            }
        }
    }
    #[getter]
    pub fn symbols(&self, py: Python<'_>) -> PyResult<Vec<Symbol>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.definitions(db);
        let subcategory = category.symbols(db);
        let nodes = subcategory
            .values()
            .map(|values| {
                values
                    .into_iter()
                    .enumerate()
                    .map(|(idx, node)| Symbol::new(
                        py.clone(),
                        node.fully_qualified_name(db),
                        idx,
                        node,
                        self.codebase.clone(),
                    ))
            })
            .flatten()
            .collect();
        Ok(nodes)
    }
    #[pyo3(signature = (name, optional = false))]
    pub fn get_symbol(
        &self,
        py: Python<'_>,
        name: String,
        optional: bool,
    ) -> PyResult<Option<Symbol>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.definitions(db);
        let subcategory = category.symbols(db);
        let res = subcategory.get(&name);
        if let Some(nodes) = res {
            if nodes.len() == 1 {
                Ok(
                    Some(
                        Symbol::new(
                            py.clone(),
                            nodes[0].fully_qualified_name(db),
                            0,
                            &nodes[0],
                            self.codebase.clone(),
                        ),
                    ),
                )
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "Ambiguous symbol {} found {} possible matches", name, nodes
                            .len()
                        ),
                    ),
                )
            }
        } else {
            if optional {
                Ok(None)
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!("No symbol {} found", name),
                    ),
                )
            }
        }
    }
    #[getter]
    pub fn references(&self, py: Python<'_>) -> PyResult<Vec<Reference>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.references(db);
        let subcategory = category.references(db);
        let nodes = subcategory
            .values()
            .map(|values| {
                values
                    .into_iter()
                    .enumerate()
                    .map(|(idx, node)| Reference::new(
                        py.clone(),
                        node.fully_qualified_name(db),
                        idx,
                        node,
                        self.codebase.clone(),
                    ))
            })
            .flatten()
            .collect();
        Ok(nodes)
    }
    #[pyo3(signature = (name, optional = false))]
    pub fn get_reference(
        &self,
        py: Python<'_>,
        name: String,
        optional: bool,
    ) -> PyResult<Option<Reference>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.references(db);
        let subcategory = category.references(db);
        let res = subcategory.get(&name);
        if let Some(nodes) = res {
            if nodes.len() == 1 {
                Ok(
                    Some(
                        Reference::new(
                            py.clone(),
                            nodes[0].fully_qualified_name(db),
                            0,
                            &nodes[0],
                            self.codebase.clone(),
                        ),
                    ),
                )
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "Ambiguous symbol {} found {} possible matches", name, nodes
                            .len()
                        ),
                    ),
                )
            }
        } else {
            if optional {
                Ok(None)
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!("No symbol {} found", name),
                    ),
                )
            }
        }
    }
}
mod cst {
    use pyo3::prelude::*;
    use std::sync::Arc;
    use pyo3::sync::GILProtected;
    use codegen_sdk_resolution::CodebaseContext;
    use codegen_sdk_common::traits::CSTNode;
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AliasedImport {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AliasedImport {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AliasedImport<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AliasedImport {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousAmpersand {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousAmpersand {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousAmpersand<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousAmpersand {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousAmpersandEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousAmpersandEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousAmpersandEquals<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousAmpersandEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousAnd {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousAnd {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousAnd<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousAnd {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousAs {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousAs {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousAs<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousAs {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousAssert {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousAssert {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousAssert<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousAssert {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousAsterisk {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousAsterisk {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousAsterisk<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousAsterisk {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousAsteriskAsterisk {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousAsteriskAsterisk {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousAsteriskAsterisk<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousAsteriskAsterisk {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousAsteriskAsteriskEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousAsteriskAsteriskEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousAsteriskAsteriskEquals<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousAsteriskAsteriskEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousAsteriskEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousAsteriskEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousAsteriskEquals<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousAsteriskEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousAsync {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousAsync {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousAsync<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousAsync {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousAt {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousAt {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousAt<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousAt {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousAtEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousAtEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousAtEquals<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousAtEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousAwait {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousAwait {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousAwait<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousAwait {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousBackslash {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousBackslash {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousBackslash<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousBackslash {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousBangEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousBangEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousBangEquals<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousBangEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousBreak {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousBreak {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousBreak<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousBreak {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousCaret {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousCaret {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousCaret<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousCaret {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousCaretEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousCaretEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousCaretEquals<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousCaretEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousCase {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousCase {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousCase<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousCase {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousClass {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousClass {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousClass<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousClass {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousCloseBrace {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousCloseBrace {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousCloseBrace<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousCloseBrace {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousCloseBracket {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousCloseBracket {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousCloseBracket<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousCloseBracket {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousCloseParen {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousCloseParen {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousCloseParen<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousCloseParen {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousColon {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousColon {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousColon<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousColon {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousColonEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousColonEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousColonEquals<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousColonEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousComma {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousComma {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousComma<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousComma {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousContinue {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousContinue {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousContinue<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousContinue {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousDef {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousDef {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousDef<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousDef {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousDel {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousDel {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousDel<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousDel {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousDot {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousDot {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousDot<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousDot {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousElif {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousElif {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousElif<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousElif {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousElse {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousElse {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousElse<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousElse {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousEquals<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousEqualsEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousEqualsEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousEqualsEquals<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousEqualsEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousExcept {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousExcept {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousExcept<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousExcept {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousExceptAsterisk {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousExceptAsterisk {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousExceptAsterisk<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousExceptAsterisk {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousExec {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousExec {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousExec<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousExec {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousFinally {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousFinally {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousFinally<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousFinally {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousFor {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousFor {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousFor<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousFor {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousFrom {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousFrom {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousFrom<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousFrom {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousFuture {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousFuture {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousFuture<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousFuture {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousGlobal {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousGlobal {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousGlobal<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousGlobal {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousGreaterThan {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousGreaterThan {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousGreaterThan<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousGreaterThan {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousGreaterThanEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousGreaterThanEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousGreaterThanEquals<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousGreaterThanEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousGreaterThanGreaterThan {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousGreaterThanGreaterThan {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousGreaterThanGreaterThan<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousGreaterThanGreaterThan {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousGreaterThanGreaterThanEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousGreaterThanGreaterThanEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousGreaterThanGreaterThanEquals<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousGreaterThanGreaterThanEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousIf {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousIf {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousIf<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousIf {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousImport {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousImport {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousImport<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousImport {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousIn {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousIn {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousIn<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousIn {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousIs {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousIs {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousIs<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousIs {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousIsNot {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousIsNot {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousIsNot<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousIsNot {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousLambda {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousLambda {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousLambda<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousLambda {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousLessThan {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousLessThan {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousLessThan<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousLessThan {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousLessThanEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousLessThanEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousLessThanEquals<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousLessThanEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousLessThanGreaterThan {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousLessThanGreaterThan {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousLessThanGreaterThan<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousLessThanGreaterThan {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousLessThanLessThan {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousLessThanLessThan {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousLessThanLessThan<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousLessThanLessThan {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousLessThanLessThanEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousLessThanLessThanEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousLessThanLessThanEquals<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousLessThanLessThanEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousMatch {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousMatch {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousMatch<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousMatch {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousMinus {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousMinus {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousMinus<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousMinus {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousMinusEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousMinusEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousMinusEquals<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousMinusEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousMinusGreaterThan {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousMinusGreaterThan {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousMinusGreaterThan<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousMinusGreaterThan {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousNonlocal {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousNonlocal {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousNonlocal<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousNonlocal {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousNot {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousNot {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousNot<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousNot {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousNotIn {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousNotIn {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousNotIn<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousNotIn {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousOpenBrace {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousOpenBrace {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousOpenBrace<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousOpenBrace {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousOpenBracket {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousOpenBracket {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousOpenBracket<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousOpenBracket {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousOpenParen {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousOpenParen {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousOpenParen<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousOpenParen {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousOr {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousOr {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousOr<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousOr {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousPass {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousPass {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousPass<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousPass {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousPercent {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousPercent {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousPercent<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousPercent {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousPercentEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousPercentEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousPercentEquals<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousPercentEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousPipe {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousPipe {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousPipe<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousPipe {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousPipeEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousPipeEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousPipeEquals<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousPipeEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousPlus {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousPlus {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousPlus<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousPlus {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousPlusEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousPlusEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousPlusEquals<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousPlusEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousPrint {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousPrint {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousPrint<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousPrint {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousRaise {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousRaise {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousRaise<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousRaise {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousReturn {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousReturn {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousReturn<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousReturn {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousSemicolon {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousSemicolon {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousSemicolon<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousSemicolon {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousSlash {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousSlash {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousSlash<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousSlash {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousSlashEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousSlashEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousSlashEquals<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousSlashEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousSlashSlash {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousSlashSlash {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousSlashSlash<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousSlashSlash {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousSlashSlashEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousSlashSlashEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousSlashSlashEquals<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousSlashSlashEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousTilde {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousTilde {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousTilde<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousTilde {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousTry {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousTry {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousTry<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousTry {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousType {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousType {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousType<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousType {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousUnderscore {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousUnderscore {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousUnderscore<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousUnderscore {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousWhile {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousWhile {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousWhile<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousWhile {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousWith {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousWith {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousWith<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousWith {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AnonymousYield {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousYield {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AnonymousYield<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousYield {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct ArgumentList {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ArgumentList {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentList<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ArgumentList {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<ArgumentListChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ArgumentListChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AsPattern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AsPattern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AsPattern<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AsPattern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<AsPatternChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        AsPatternChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AsPatternTarget {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AsPatternTarget {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternTarget<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AsPatternTarget {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AssertStatement {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AssertStatement {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatement<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AssertStatement {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<AssertStatementChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        AssertStatementChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct Assignment {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Assignment {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::Assignment<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Assignment {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct Attribute {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Attribute {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::Attribute<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Attribute {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct AugmentedAssignment {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AugmentedAssignment {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignment<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AugmentedAssignment {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct Await {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Await {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_python::cst::Await<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Await {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<AwaitChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        AwaitChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct BinaryOperator {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl BinaryOperator {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperator<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl BinaryOperator {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct Block {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Block {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_python::cst::Block<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Block {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<BlockChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        BlockChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct BooleanOperator {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl BooleanOperator {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperator<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl BooleanOperator {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct BreakStatement {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl BreakStatement {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::BreakStatement<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl BreakStatement {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct Call {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Call {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_python::cst::Call<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Call {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct CaseClause {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl CaseClause {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::CaseClause<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl CaseClause {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<CaseClauseChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        CaseClauseChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct CasePattern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl CasePattern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::CasePattern<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl CasePattern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<CasePatternChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        CasePatternChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct Chevron {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Chevron {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_python::cst::Chevron<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Chevron {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<ChevronChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ChevronChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct ClassDefinition {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ClassDefinition {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::ClassDefinition<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ClassDefinition {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct ClassPattern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ClassPattern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::ClassPattern<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ClassPattern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<ClassPatternChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ClassPatternChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct Comment {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Comment {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_python::cst::Comment<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Comment {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct ComparisonOperator {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ComparisonOperator {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperator<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ComparisonOperator {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<ComparisonOperatorChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ComparisonOperatorChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct ComplexPattern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ComplexPattern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::ComplexPattern<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ComplexPattern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<ComplexPatternChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ComplexPatternChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct ConcatenatedString {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ConcatenatedString {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::ConcatenatedString<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ConcatenatedString {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<ConcatenatedStringChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ConcatenatedStringChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct ConditionalExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ConditionalExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpression<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ConditionalExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<ConditionalExpressionChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ConditionalExpressionChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct ConstrainedType {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ConstrainedType {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::ConstrainedType<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ConstrainedType {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<ConstrainedTypeChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ConstrainedTypeChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct ContinueStatement {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ContinueStatement {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::ContinueStatement<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ContinueStatement {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct DecoratedDefinition {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl DecoratedDefinition {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratedDefinition<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl DecoratedDefinition {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<DecoratedDefinitionChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        DecoratedDefinitionChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct Decorator {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Decorator {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::Decorator<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Decorator {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<DecoratorChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        DecoratorChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct DefaultParameter {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl DefaultParameter {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameter<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl DefaultParameter {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct DeleteStatement {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl DeleteStatement {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatement<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl DeleteStatement {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<DeleteStatementChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        DeleteStatementChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct DictPattern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl DictPattern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::DictPattern<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl DictPattern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<DictPatternChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        DictPatternChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct Dictionary {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Dictionary {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::Dictionary<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Dictionary {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<DictionaryChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        DictionaryChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct DictionaryComprehension {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl DictionaryComprehension {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::DictionaryComprehension<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl DictionaryComprehension {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<DictionaryComprehensionChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        DictionaryComprehensionChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct DictionarySplat {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl DictionarySplat {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplat<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl DictionarySplat {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<DictionarySplatChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        DictionarySplatChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct DictionarySplatPattern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl DictionarySplatPattern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatPattern<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl DictionarySplatPattern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<DictionarySplatPatternChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        DictionarySplatPatternChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct DottedName {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl DottedName {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::DottedName<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl DottedName {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<DottedNameChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        DottedNameChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct ElifClause {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ElifClause {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClause<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ElifClause {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct Ellipsis {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Ellipsis {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::Ellipsis<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Ellipsis {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct ElseClause {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ElseClause {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::ElseClause<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ElseClause {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct EscapeInterpolation {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl EscapeInterpolation {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::EscapeInterpolation<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl EscapeInterpolation {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct EscapeSequence {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl EscapeSequence {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::EscapeSequence<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl EscapeSequence {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct ExceptClause {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ExceptClause {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClause<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ExceptClause {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<ExceptClauseChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ExceptClauseChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct ExceptGroupClause {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ExceptGroupClause {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClause<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ExceptGroupClause {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<ExceptGroupClauseChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ExceptGroupClauseChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct ExecStatement {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ExecStatement {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatement<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ExecStatement {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<ExecStatementChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ExecStatementChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct ExpressionList {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ExpressionList {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionList<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ExpressionList {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<ExpressionListChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ExpressionListChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct ExpressionStatement {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ExpressionStatement {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatement<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ExpressionStatement {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<ExpressionStatementChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ExpressionStatementChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct False {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl False {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_python::cst::False<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl False {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct FinallyClause {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl FinallyClause {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::FinallyClause<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl FinallyClause {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<FinallyClauseChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        FinallyClauseChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct Float {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Float {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_python::cst::Float<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Float {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct ForInClause {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ForInClause {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClause<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ForInClause {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct ForStatement {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ForStatement {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatement<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ForStatement {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct FormatExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl FormatExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpression<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl FormatExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct FormatSpecifier {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl FormatSpecifier {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::FormatSpecifier<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl FormatSpecifier {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<FormatSpecifierChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        FormatSpecifierChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct FunctionDefinition {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl FunctionDefinition {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::FunctionDefinition<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl FunctionDefinition {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct FutureImportStatement {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl FutureImportStatement {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::FutureImportStatement<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl FutureImportStatement {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct GeneratorExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl GeneratorExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpression<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl GeneratorExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<GeneratorExpressionChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        GeneratorExpressionChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct GenericType {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl GenericType {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::GenericType<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl GenericType {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<GenericTypeChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        GenericTypeChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct GlobalStatement {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl GlobalStatement {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::GlobalStatement<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl GlobalStatement {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<GlobalStatementChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        GlobalStatementChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct Identifier {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Identifier {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::Identifier<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Identifier {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct IfClause {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl IfClause {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::IfClause<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl IfClause {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<IfClauseChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        IfClauseChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct IfStatement {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl IfStatement {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatement<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl IfStatement {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct ImportFromStatement {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ImportFromStatement {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::ImportFromStatement<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ImportFromStatement {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<ImportFromStatementChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ImportFromStatementChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct ImportPrefix {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ImportPrefix {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::ImportPrefix<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ImportPrefix {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct ImportStatement {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ImportStatement {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::ImportStatement<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ImportStatement {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct Integer {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Integer {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_python::cst::Integer<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Integer {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct Interpolation {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Interpolation {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::Interpolation<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Interpolation {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct KeywordArgument {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl KeywordArgument {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgument<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl KeywordArgument {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct KeywordPattern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl KeywordPattern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordPattern<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl KeywordPattern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<KeywordPatternChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        KeywordPatternChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct KeywordSeparator {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl KeywordSeparator {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordSeparator<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl KeywordSeparator {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct Lambda {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Lambda {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_python::cst::Lambda<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Lambda {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct LambdaParameters {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl LambdaParameters {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaParameters<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl LambdaParameters {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<LambdaParametersChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        LambdaParametersChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct LineContinuation {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl LineContinuation {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::LineContinuation<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl LineContinuation {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct List {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl List {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_python::cst::List<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl List {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<ListChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ListChildren::new(py.clone(), id, self.codebase.clone()).unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct ListComprehension {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ListComprehension {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehension<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ListComprehension {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<ListComprehensionChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ListComprehensionChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct ListPattern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ListPattern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::ListPattern<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ListPattern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<ListPatternChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ListPatternChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct ListSplat {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ListSplat {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplat<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ListSplat {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<ListSplatChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ListSplatChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct ListSplatPattern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ListSplatPattern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatPattern<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ListSplatPattern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<ListSplatPatternChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ListSplatPatternChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct MatchStatement {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl MatchStatement {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatement<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl MatchStatement {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct MemberType {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl MemberType {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::MemberType<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl MemberType {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<MemberTypeChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        MemberTypeChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct Module {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Module {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_python::cst::Module<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Module {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<ModuleChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ModuleChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct NamedExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl NamedExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpression<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl NamedExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct None {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl None {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_python::cst::None<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl None {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct NonlocalStatement {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl NonlocalStatement {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::NonlocalStatement<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl NonlocalStatement {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<NonlocalStatementChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        NonlocalStatementChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct NotOperator {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl NotOperator {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperator<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl NotOperator {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct Pair {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Pair {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_python::cst::Pair<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Pair {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct Parameters {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Parameters {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::Parameters<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Parameters {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<ParametersChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ParametersChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct ParenthesizedExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ParenthesizedExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpression<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ParenthesizedExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<ParenthesizedExpressionChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ParenthesizedExpressionChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct ParenthesizedListSplat {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ParenthesizedListSplat {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedListSplat<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ParenthesizedListSplat {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<ParenthesizedListSplatChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ParenthesizedListSplatChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct PassStatement {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl PassStatement {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::PassStatement<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl PassStatement {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct PatternList {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl PatternList {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::PatternList<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl PatternList {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<PatternListChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        PatternListChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct PositionalSeparator {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl PositionalSeparator {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::PositionalSeparator<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl PositionalSeparator {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct PrintStatement {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl PrintStatement {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatement<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl PrintStatement {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<PrintStatementChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        PrintStatementChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct RaiseStatement {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl RaiseStatement {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatement<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl RaiseStatement {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<RaiseStatementChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        RaiseStatementChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct RelativeImport {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl RelativeImport {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::RelativeImport<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl RelativeImport {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<RelativeImportChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        RelativeImportChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct ReturnStatement {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ReturnStatement {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatement<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ReturnStatement {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<ReturnStatementChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ReturnStatementChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct Set {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Set {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_python::cst::Set<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Set {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<SetChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        SetChildren::new(py.clone(), id, self.codebase.clone()).unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct SetComprehension {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl SetComprehension {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehension<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl SetComprehension {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<SetComprehensionChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        SetComprehensionChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct Slice {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Slice {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_python::cst::Slice<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Slice {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<SliceChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        SliceChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct SplatPattern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl SplatPattern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::SplatPattern<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl SplatPattern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<SplatPatternChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        SplatPatternChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct SplatType {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl SplatType {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::SplatType<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl SplatType {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<SplatTypeChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        SplatTypeChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct String {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl String {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_python::cst::String<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl String {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<StringChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        StringChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct StringContent {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl StringContent {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::StringContent<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl StringContent {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<StringContentChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        StringContentChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct StringEnd {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl StringEnd {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::StringEnd<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl StringEnd {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct StringStart {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl StringStart {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::StringStart<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl StringStart {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct Subscript {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Subscript {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::Subscript<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Subscript {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct True {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl True {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_python::cst::True<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl True {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct TryStatement {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl TryStatement {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::TryStatement<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl TryStatement {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<TryStatementChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        TryStatementChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct Tuple {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Tuple {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_python::cst::Tuple<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Tuple {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<TupleChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        TupleChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct TuplePattern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl TuplePattern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::TuplePattern<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl TuplePattern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<TuplePatternChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        TuplePatternChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct Type {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Type {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_python::cst::Type<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Type {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<TypeChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        TypeChildren::new(py.clone(), id, self.codebase.clone()).unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct TypeAliasStatement {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl TypeAliasStatement {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::TypeAliasStatement<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl TypeAliasStatement {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct TypeConversion {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl TypeConversion {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::TypeConversion<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl TypeConversion {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct TypeParameter {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl TypeParameter {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::TypeParameter<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl TypeParameter {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<TypeParameterChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        TypeParameterChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct TypedDefaultParameter {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl TypedDefaultParameter {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameter<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl TypedDefaultParameter {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct TypedParameter {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl TypedParameter {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::TypedParameter<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl TypedParameter {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<TypedParameterChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        TypedParameterChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct UnaryOperator {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl UnaryOperator {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperator<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl UnaryOperator {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct UnionPattern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl UnionPattern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::UnionPattern<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl UnionPattern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<UnionPatternChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        UnionPatternChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct UnionType {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl UnionType {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::UnionType<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl UnionType {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<UnionTypeChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        UnionTypeChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct WhileStatement {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl WhileStatement {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatement<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl WhileStatement {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct WildcardImport {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl WildcardImport {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::WildcardImport<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl WildcardImport {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct WithClause {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl WithClause {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::WithClause<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl WithClause {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<WithClauseChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        WithClauseChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct WithItem {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl WithItem {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::WithItem<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl WithItem {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct WithStatement {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl WithStatement {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::cst::WithStatement<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl WithStatement {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<WithStatementChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        WithStatementChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::python.cst")]
    pub struct Yield {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Yield {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_python::ast::PythonFile<'db>,
        > {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_python::cst::Yield<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Yield {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<YieldChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        YieldChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[derive(IntoPyObject)]
    pub enum AliasedImportChildren {
        Comment(Comment),
        DottedName(DottedName),
        Identifier(Identifier),
    }
    impl AliasedImportChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AliasedImportChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AliasedImportChildrenRef::DottedName(
                        _,
                    ) => {
                        Ok(
                            Self::DottedName(
                                DottedName::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AliasedImportChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ArgumentListChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        DictionarySplat(DictionarySplat),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        KeywordArgument(KeywordArgument),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl ArgumentListChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::DictionarySplat(
                        _,
                    ) => {
                        Ok(
                            Self::DictionarySplat(
                                DictionarySplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::KeywordArgument(
                        _,
                    ) => {
                        Ok(
                            Self::KeywordArgument(
                                KeywordArgument::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ArgumentListChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum AsPatternChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        CasePattern(CasePattern),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl AsPatternChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::CasePattern(
                        _,
                    ) => {
                        Ok(
                            Self::CasePattern(
                                CasePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AsPatternChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum AssertStatementChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl AssertStatementChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssertStatementChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum AssignmentChildren {
        AsPattern(AsPattern),
        Assignment(Assignment),
        Attribute(Attribute),
        AugmentedAssignment(AugmentedAssignment),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        ExpressionList(ExpressionList),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListPattern(ListPattern),
        ListSplat(ListSplat),
        ListSplatPattern(ListSplatPattern),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        PatternList(PatternList),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        TuplePattern(TuplePattern),
        Type(Type),
        UnaryOperator(UnaryOperator),
        Yield(Yield),
    }
    impl AssignmentChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::Assignment(
                        _,
                    ) => {
                        Ok(
                            Self::Assignment(
                                Assignment::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::AugmentedAssignment(
                        _,
                    ) => {
                        Ok(
                            Self::AugmentedAssignment(
                                AugmentedAssignment::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::ExpressionList(
                        _,
                    ) => {
                        Ok(
                            Self::ExpressionList(
                                ExpressionList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::ListPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListPattern(
                                ListPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::ListSplatPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplatPattern(
                                ListSplatPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::PatternList(
                        _,
                    ) => {
                        Ok(
                            Self::PatternList(
                                PatternList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::Type(
                        _,
                    ) => Ok(Self::Type(Type::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentChildrenRef::Yield(
                        _,
                    ) => Ok(Self::Yield(Yield::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum AssignmentLeft {
        Attribute(Attribute),
        Comment(Comment),
        Identifier(Identifier),
        ListPattern(ListPattern),
        ListSplatPattern(ListSplatPattern),
        PatternList(PatternList),
        Subscript(Subscript),
        TuplePattern(TuplePattern),
    }
    impl AssignmentLeft {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentLeftRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentLeftRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentLeftRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentLeftRef::ListPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListPattern(
                                ListPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentLeftRef::ListSplatPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplatPattern(
                                ListSplatPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentLeftRef::PatternList(
                        _,
                    ) => {
                        Ok(
                            Self::PatternList(
                                PatternList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentLeftRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentLeftRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum AssignmentRight {
        AsPattern(AsPattern),
        Assignment(Assignment),
        Attribute(Attribute),
        AugmentedAssignment(AugmentedAssignment),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        ExpressionList(ExpressionList),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        PatternList(PatternList),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
        Yield(Yield),
    }
    impl AssignmentRight {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::Assignment(
                        _,
                    ) => {
                        Ok(
                            Self::Assignment(
                                Assignment::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::AugmentedAssignment(
                        _,
                    ) => {
                        Ok(
                            Self::AugmentedAssignment(
                                AugmentedAssignment::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::ExpressionList(
                        _,
                    ) => {
                        Ok(
                            Self::ExpressionList(
                                ExpressionList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::PatternList(
                        _,
                    ) => {
                        Ok(
                            Self::PatternList(
                                PatternList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AssignmentRightRef::Yield(
                        _,
                    ) => Ok(Self::Yield(Yield::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum AttributeChildren {
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        Call(Call),
        Comment(Comment),
        ConcatenatedString(ConcatenatedString),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        None(None),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl AttributeChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AttributeChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AttributeChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AttributeChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AttributeChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AttributeChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AttributeChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AttributeChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AttributeChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AttributeChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AttributeChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AttributeChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AttributeChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AttributeChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AttributeChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AttributeChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AttributeChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AttributeChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AttributeChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AttributeChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AttributeChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AttributeChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AttributeChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AttributeChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AttributeChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AttributeChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AttributeChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum AugmentedAssignmentChildren {
        AnonymousAmpersandEquals(AnonymousAmpersandEquals),
        AnonymousAsteriskAsteriskEquals(AnonymousAsteriskAsteriskEquals),
        AnonymousAsteriskEquals(AnonymousAsteriskEquals),
        AnonymousAtEquals(AnonymousAtEquals),
        AnonymousCaretEquals(AnonymousCaretEquals),
        AnonymousGreaterThanGreaterThanEquals(AnonymousGreaterThanGreaterThanEquals),
        AnonymousLessThanLessThanEquals(AnonymousLessThanLessThanEquals),
        AnonymousMinusEquals(AnonymousMinusEquals),
        AnonymousPercentEquals(AnonymousPercentEquals),
        AnonymousPipeEquals(AnonymousPipeEquals),
        AnonymousPlusEquals(AnonymousPlusEquals),
        AnonymousSlashEquals(AnonymousSlashEquals),
        AnonymousSlashSlashEquals(AnonymousSlashSlashEquals),
        AsPattern(AsPattern),
        Assignment(Assignment),
        Attribute(Attribute),
        AugmentedAssignment(AugmentedAssignment),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        ExpressionList(ExpressionList),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListPattern(ListPattern),
        ListSplat(ListSplat),
        ListSplatPattern(ListSplatPattern),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        PatternList(PatternList),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        TuplePattern(TuplePattern),
        UnaryOperator(UnaryOperator),
        Yield(Yield),
    }
    impl AugmentedAssignmentChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::AnonymousAmpersandEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousAmpersandEquals(
                                AnonymousAmpersandEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::AnonymousAsteriskAsteriskEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousAsteriskAsteriskEquals(
                                AnonymousAsteriskAsteriskEquals::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::AnonymousAsteriskEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousAsteriskEquals(
                                AnonymousAsteriskEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::AnonymousAtEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousAtEquals(
                                AnonymousAtEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::AnonymousCaretEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousCaretEquals(
                                AnonymousCaretEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::AnonymousGreaterThanGreaterThanEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousGreaterThanGreaterThanEquals(
                                AnonymousGreaterThanGreaterThanEquals::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::AnonymousLessThanLessThanEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousLessThanLessThanEquals(
                                AnonymousLessThanLessThanEquals::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::AnonymousMinusEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousMinusEquals(
                                AnonymousMinusEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::AnonymousPercentEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousPercentEquals(
                                AnonymousPercentEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::AnonymousPipeEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousPipeEquals(
                                AnonymousPipeEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::AnonymousPlusEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousPlusEquals(
                                AnonymousPlusEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::AnonymousSlashEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousSlashEquals(
                                AnonymousSlashEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::AnonymousSlashSlashEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousSlashSlashEquals(
                                AnonymousSlashSlashEquals::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::Assignment(
                        _,
                    ) => {
                        Ok(
                            Self::Assignment(
                                Assignment::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::AugmentedAssignment(
                        _,
                    ) => {
                        Ok(
                            Self::AugmentedAssignment(
                                AugmentedAssignment::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::ExpressionList(
                        _,
                    ) => {
                        Ok(
                            Self::ExpressionList(
                                ExpressionList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::ListPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListPattern(
                                ListPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::ListSplatPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplatPattern(
                                ListSplatPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::PatternList(
                        _,
                    ) => {
                        Ok(
                            Self::PatternList(
                                PatternList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentChildrenRef::Yield(
                        _,
                    ) => Ok(Self::Yield(Yield::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum AugmentedAssignmentLeft {
        Attribute(Attribute),
        Comment(Comment),
        Identifier(Identifier),
        ListPattern(ListPattern),
        ListSplatPattern(ListSplatPattern),
        PatternList(PatternList),
        Subscript(Subscript),
        TuplePattern(TuplePattern),
    }
    impl AugmentedAssignmentLeft {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentLeftRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentLeftRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentLeftRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentLeftRef::ListPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListPattern(
                                ListPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentLeftRef::ListSplatPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplatPattern(
                                ListSplatPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentLeftRef::PatternList(
                        _,
                    ) => {
                        Ok(
                            Self::PatternList(
                                PatternList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentLeftRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentLeftRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum AugmentedAssignmentOperator {
        AnonymousAmpersandEquals(AnonymousAmpersandEquals),
        AnonymousAsteriskAsteriskEquals(AnonymousAsteriskAsteriskEquals),
        AnonymousAsteriskEquals(AnonymousAsteriskEquals),
        AnonymousAtEquals(AnonymousAtEquals),
        AnonymousCaretEquals(AnonymousCaretEquals),
        AnonymousGreaterThanGreaterThanEquals(AnonymousGreaterThanGreaterThanEquals),
        AnonymousLessThanLessThanEquals(AnonymousLessThanLessThanEquals),
        AnonymousMinusEquals(AnonymousMinusEquals),
        AnonymousPercentEquals(AnonymousPercentEquals),
        AnonymousPipeEquals(AnonymousPipeEquals),
        AnonymousPlusEquals(AnonymousPlusEquals),
        AnonymousSlashEquals(AnonymousSlashEquals),
        AnonymousSlashSlashEquals(AnonymousSlashSlashEquals),
    }
    impl AugmentedAssignmentOperator {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentOperatorRef::AnonymousAmpersandEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousAmpersandEquals(
                                AnonymousAmpersandEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentOperatorRef::AnonymousAsteriskAsteriskEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousAsteriskAsteriskEquals(
                                AnonymousAsteriskAsteriskEquals::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentOperatorRef::AnonymousAsteriskEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousAsteriskEquals(
                                AnonymousAsteriskEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentOperatorRef::AnonymousAtEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousAtEquals(
                                AnonymousAtEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentOperatorRef::AnonymousCaretEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousCaretEquals(
                                AnonymousCaretEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentOperatorRef::AnonymousGreaterThanGreaterThanEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousGreaterThanGreaterThanEquals(
                                AnonymousGreaterThanGreaterThanEquals::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentOperatorRef::AnonymousLessThanLessThanEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousLessThanLessThanEquals(
                                AnonymousLessThanLessThanEquals::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentOperatorRef::AnonymousMinusEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousMinusEquals(
                                AnonymousMinusEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentOperatorRef::AnonymousPercentEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousPercentEquals(
                                AnonymousPercentEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentOperatorRef::AnonymousPipeEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousPipeEquals(
                                AnonymousPipeEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentOperatorRef::AnonymousPlusEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousPlusEquals(
                                AnonymousPlusEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentOperatorRef::AnonymousSlashEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousSlashEquals(
                                AnonymousSlashEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentOperatorRef::AnonymousSlashSlashEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousSlashSlashEquals(
                                AnonymousSlashSlashEquals::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum AugmentedAssignmentRight {
        AsPattern(AsPattern),
        Assignment(Assignment),
        Attribute(Attribute),
        AugmentedAssignment(AugmentedAssignment),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        ExpressionList(ExpressionList),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        PatternList(PatternList),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
        Yield(Yield),
    }
    impl AugmentedAssignmentRight {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::Assignment(
                        _,
                    ) => {
                        Ok(
                            Self::Assignment(
                                Assignment::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::AugmentedAssignment(
                        _,
                    ) => {
                        Ok(
                            Self::AugmentedAssignment(
                                AugmentedAssignment::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::ExpressionList(
                        _,
                    ) => {
                        Ok(
                            Self::ExpressionList(
                                ExpressionList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::PatternList(
                        _,
                    ) => {
                        Ok(
                            Self::PatternList(
                                PatternList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AugmentedAssignmentRightRef::Yield(
                        _,
                    ) => Ok(Self::Yield(Yield::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum AwaitChildren {
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        Call(Call),
        Comment(Comment),
        ConcatenatedString(ConcatenatedString),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        None(None),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl AwaitChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AwaitChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AwaitChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AwaitChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AwaitChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AwaitChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AwaitChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AwaitChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AwaitChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AwaitChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AwaitChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AwaitChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AwaitChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AwaitChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AwaitChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AwaitChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AwaitChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AwaitChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AwaitChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AwaitChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AwaitChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AwaitChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AwaitChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AwaitChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AwaitChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AwaitChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::AwaitChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum BinaryOperatorChildren {
        AnonymousAmpersand(AnonymousAmpersand),
        AnonymousAsterisk(AnonymousAsterisk),
        AnonymousAsteriskAsterisk(AnonymousAsteriskAsterisk),
        AnonymousAt(AnonymousAt),
        AnonymousCaret(AnonymousCaret),
        AnonymousGreaterThanGreaterThan(AnonymousGreaterThanGreaterThan),
        AnonymousLessThanLessThan(AnonymousLessThanLessThan),
        AnonymousMinus(AnonymousMinus),
        AnonymousPercent(AnonymousPercent),
        AnonymousPipe(AnonymousPipe),
        AnonymousPlus(AnonymousPlus),
        AnonymousSlash(AnonymousSlash),
        AnonymousSlashSlash(AnonymousSlashSlash),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        Call(Call),
        Comment(Comment),
        ConcatenatedString(ConcatenatedString),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        None(None),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl BinaryOperatorChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::AnonymousAmpersand(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousAmpersand(
                                AnonymousAmpersand::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::AnonymousAsterisk(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousAsterisk(
                                AnonymousAsterisk::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::AnonymousAsteriskAsterisk(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousAsteriskAsterisk(
                                AnonymousAsteriskAsterisk::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::AnonymousAt(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousAt(
                                AnonymousAt::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::AnonymousCaret(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousCaret(
                                AnonymousCaret::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::AnonymousGreaterThanGreaterThan(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousGreaterThanGreaterThan(
                                AnonymousGreaterThanGreaterThan::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::AnonymousLessThanLessThan(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousLessThanLessThan(
                                AnonymousLessThanLessThan::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::AnonymousMinus(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousMinus(
                                AnonymousMinus::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::AnonymousPercent(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousPercent(
                                AnonymousPercent::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::AnonymousPipe(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousPipe(
                                AnonymousPipe::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::AnonymousPlus(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousPlus(
                                AnonymousPlus::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::AnonymousSlash(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousSlash(
                                AnonymousSlash::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::AnonymousSlashSlash(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousSlashSlash(
                                AnonymousSlashSlash::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum BinaryOperatorOperator {
        AnonymousAmpersand(AnonymousAmpersand),
        AnonymousAsterisk(AnonymousAsterisk),
        AnonymousAsteriskAsterisk(AnonymousAsteriskAsterisk),
        AnonymousAt(AnonymousAt),
        AnonymousCaret(AnonymousCaret),
        AnonymousGreaterThanGreaterThan(AnonymousGreaterThanGreaterThan),
        AnonymousLessThanLessThan(AnonymousLessThanLessThan),
        AnonymousMinus(AnonymousMinus),
        AnonymousPercent(AnonymousPercent),
        AnonymousPipe(AnonymousPipe),
        AnonymousPlus(AnonymousPlus),
        AnonymousSlash(AnonymousSlash),
        AnonymousSlashSlash(AnonymousSlashSlash),
    }
    impl BinaryOperatorOperator {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorOperatorRef::AnonymousAmpersand(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousAmpersand(
                                AnonymousAmpersand::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorOperatorRef::AnonymousAsterisk(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousAsterisk(
                                AnonymousAsterisk::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorOperatorRef::AnonymousAsteriskAsterisk(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousAsteriskAsterisk(
                                AnonymousAsteriskAsterisk::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorOperatorRef::AnonymousAt(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousAt(
                                AnonymousAt::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorOperatorRef::AnonymousCaret(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousCaret(
                                AnonymousCaret::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorOperatorRef::AnonymousGreaterThanGreaterThan(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousGreaterThanGreaterThan(
                                AnonymousGreaterThanGreaterThan::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorOperatorRef::AnonymousLessThanLessThan(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousLessThanLessThan(
                                AnonymousLessThanLessThan::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorOperatorRef::AnonymousMinus(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousMinus(
                                AnonymousMinus::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorOperatorRef::AnonymousPercent(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousPercent(
                                AnonymousPercent::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorOperatorRef::AnonymousPipe(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousPipe(
                                AnonymousPipe::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorOperatorRef::AnonymousPlus(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousPlus(
                                AnonymousPlus::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorOperatorRef::AnonymousSlash(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousSlash(
                                AnonymousSlash::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BinaryOperatorOperatorRef::AnonymousSlashSlash(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousSlashSlash(
                                AnonymousSlashSlash::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum BlockChildren {
        AssertStatement(AssertStatement),
        BreakStatement(BreakStatement),
        CaseClause(CaseClause),
        ClassDefinition(ClassDefinition),
        Comment(Comment),
        ContinueStatement(ContinueStatement),
        DecoratedDefinition(DecoratedDefinition),
        DeleteStatement(DeleteStatement),
        ExecStatement(ExecStatement),
        ExpressionStatement(ExpressionStatement),
        ForStatement(ForStatement),
        FunctionDefinition(FunctionDefinition),
        FutureImportStatement(FutureImportStatement),
        GlobalStatement(GlobalStatement),
        IfStatement(IfStatement),
        ImportFromStatement(ImportFromStatement),
        ImportStatement(ImportStatement),
        MatchStatement(MatchStatement),
        NonlocalStatement(NonlocalStatement),
        PassStatement(PassStatement),
        PrintStatement(PrintStatement),
        RaiseStatement(RaiseStatement),
        ReturnStatement(ReturnStatement),
        TryStatement(TryStatement),
        TypeAliasStatement(TypeAliasStatement),
        WhileStatement(WhileStatement),
        WithStatement(WithStatement),
    }
    impl BlockChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BlockChildrenRef::AssertStatement(
                        _,
                    ) => {
                        Ok(
                            Self::AssertStatement(
                                AssertStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BlockChildrenRef::BreakStatement(
                        _,
                    ) => {
                        Ok(
                            Self::BreakStatement(
                                BreakStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BlockChildrenRef::CaseClause(
                        _,
                    ) => {
                        Ok(
                            Self::CaseClause(
                                CaseClause::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BlockChildrenRef::ClassDefinition(
                        _,
                    ) => {
                        Ok(
                            Self::ClassDefinition(
                                ClassDefinition::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BlockChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BlockChildrenRef::ContinueStatement(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueStatement(
                                ContinueStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BlockChildrenRef::DecoratedDefinition(
                        _,
                    ) => {
                        Ok(
                            Self::DecoratedDefinition(
                                DecoratedDefinition::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BlockChildrenRef::DeleteStatement(
                        _,
                    ) => {
                        Ok(
                            Self::DeleteStatement(
                                DeleteStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BlockChildrenRef::ExecStatement(
                        _,
                    ) => {
                        Ok(
                            Self::ExecStatement(
                                ExecStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BlockChildrenRef::ExpressionStatement(
                        _,
                    ) => {
                        Ok(
                            Self::ExpressionStatement(
                                ExpressionStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BlockChildrenRef::ForStatement(
                        _,
                    ) => {
                        Ok(
                            Self::ForStatement(
                                ForStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BlockChildrenRef::FunctionDefinition(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionDefinition(
                                FunctionDefinition::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BlockChildrenRef::FutureImportStatement(
                        _,
                    ) => {
                        Ok(
                            Self::FutureImportStatement(
                                FutureImportStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BlockChildrenRef::GlobalStatement(
                        _,
                    ) => {
                        Ok(
                            Self::GlobalStatement(
                                GlobalStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BlockChildrenRef::IfStatement(
                        _,
                    ) => {
                        Ok(
                            Self::IfStatement(
                                IfStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BlockChildrenRef::ImportFromStatement(
                        _,
                    ) => {
                        Ok(
                            Self::ImportFromStatement(
                                ImportFromStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BlockChildrenRef::ImportStatement(
                        _,
                    ) => {
                        Ok(
                            Self::ImportStatement(
                                ImportStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BlockChildrenRef::MatchStatement(
                        _,
                    ) => {
                        Ok(
                            Self::MatchStatement(
                                MatchStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BlockChildrenRef::NonlocalStatement(
                        _,
                    ) => {
                        Ok(
                            Self::NonlocalStatement(
                                NonlocalStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BlockChildrenRef::PassStatement(
                        _,
                    ) => {
                        Ok(
                            Self::PassStatement(
                                PassStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BlockChildrenRef::PrintStatement(
                        _,
                    ) => {
                        Ok(
                            Self::PrintStatement(
                                PrintStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BlockChildrenRef::RaiseStatement(
                        _,
                    ) => {
                        Ok(
                            Self::RaiseStatement(
                                RaiseStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BlockChildrenRef::ReturnStatement(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnStatement(
                                ReturnStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BlockChildrenRef::TryStatement(
                        _,
                    ) => {
                        Ok(
                            Self::TryStatement(
                                TryStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BlockChildrenRef::TypeAliasStatement(
                        _,
                    ) => {
                        Ok(
                            Self::TypeAliasStatement(
                                TypeAliasStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BlockChildrenRef::WhileStatement(
                        _,
                    ) => {
                        Ok(
                            Self::WhileStatement(
                                WhileStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BlockChildrenRef::WithStatement(
                        _,
                    ) => {
                        Ok(
                            Self::WithStatement(
                                WithStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum BooleanOperatorChildren {
        AnonymousAnd(AnonymousAnd),
        AnonymousOr(AnonymousOr),
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl BooleanOperatorChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::AnonymousAnd(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousAnd(
                                AnonymousAnd::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::AnonymousOr(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousOr(
                                AnonymousOr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum BooleanOperatorOperator {
        AnonymousAnd(AnonymousAnd),
        AnonymousOr(AnonymousOr),
    }
    impl BooleanOperatorOperator {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorOperatorRef::AnonymousAnd(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousAnd(
                                AnonymousAnd::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::BooleanOperatorOperatorRef::AnonymousOr(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousOr(
                                AnonymousOr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum CallArguments {
        ArgumentList(ArgumentList),
        GeneratorExpression(GeneratorExpression),
    }
    impl CallArguments {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CallArgumentsRef::ArgumentList(
                        _,
                    ) => {
                        Ok(
                            Self::ArgumentList(
                                ArgumentList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CallArgumentsRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum CallChildren {
        ArgumentList(ArgumentList),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        Call(Call),
        Comment(Comment),
        ConcatenatedString(ConcatenatedString),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        None(None),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl CallChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CallChildrenRef::ArgumentList(
                        _,
                    ) => {
                        Ok(
                            Self::ArgumentList(
                                ArgumentList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CallChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CallChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CallChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CallChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CallChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CallChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CallChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CallChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CallChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CallChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CallChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CallChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CallChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CallChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CallChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CallChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CallChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CallChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CallChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CallChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CallChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CallChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CallChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CallChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CallChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CallChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum CaseClauseChildren {
        Block(Block),
        CasePattern(CasePattern),
        Comment(Comment),
        IfClause(IfClause),
    }
    impl CaseClauseChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CaseClauseChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CaseClauseChildrenRef::CasePattern(
                        _,
                    ) => {
                        Ok(
                            Self::CasePattern(
                                CasePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CaseClauseChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CaseClauseChildrenRef::IfClause(
                        _,
                    ) => Ok(Self::IfClause(IfClause::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum CasePatternChildren {
        AsPattern(AsPattern),
        ClassPattern(ClassPattern),
        Comment(Comment),
        ComplexPattern(ComplexPattern),
        ConcatenatedString(ConcatenatedString),
        DictPattern(DictPattern),
        DottedName(DottedName),
        False(False),
        Float(Float),
        Integer(Integer),
        KeywordPattern(KeywordPattern),
        ListPattern(ListPattern),
        None(None),
        SplatPattern(SplatPattern),
        String(String),
        True(True),
        TuplePattern(TuplePattern),
        UnionPattern(UnionPattern),
    }
    impl CasePatternChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CasePatternChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CasePatternChildrenRef::ClassPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ClassPattern(
                                ClassPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CasePatternChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CasePatternChildrenRef::ComplexPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ComplexPattern(
                                ComplexPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CasePatternChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CasePatternChildrenRef::DictPattern(
                        _,
                    ) => {
                        Ok(
                            Self::DictPattern(
                                DictPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CasePatternChildrenRef::DottedName(
                        _,
                    ) => {
                        Ok(
                            Self::DottedName(
                                DottedName::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CasePatternChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CasePatternChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CasePatternChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CasePatternChildrenRef::KeywordPattern(
                        _,
                    ) => {
                        Ok(
                            Self::KeywordPattern(
                                KeywordPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CasePatternChildrenRef::ListPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListPattern(
                                ListPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CasePatternChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CasePatternChildrenRef::SplatPattern(
                        _,
                    ) => {
                        Ok(
                            Self::SplatPattern(
                                SplatPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CasePatternChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CasePatternChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CasePatternChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CasePatternChildrenRef::UnionPattern(
                        _,
                    ) => {
                        Ok(
                            Self::UnionPattern(
                                UnionPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ChevronChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl ChevronChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ChevronChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ClassDefinitionChildren {
        ArgumentList(ArgumentList),
        Block(Block),
        Comment(Comment),
        Identifier(Identifier),
        TypeParameter(TypeParameter),
    }
    impl ClassDefinitionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ClassDefinitionChildrenRef::ArgumentList(
                        _,
                    ) => {
                        Ok(
                            Self::ArgumentList(
                                ArgumentList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ClassDefinitionChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ClassDefinitionChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ClassDefinitionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ClassDefinitionChildrenRef::TypeParameter(
                        _,
                    ) => {
                        Ok(
                            Self::TypeParameter(
                                TypeParameter::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ClassPatternChildren {
        CasePattern(CasePattern),
        Comment(Comment),
        DottedName(DottedName),
    }
    impl ClassPatternChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ClassPatternChildrenRef::CasePattern(
                        _,
                    ) => {
                        Ok(
                            Self::CasePattern(
                                CasePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ClassPatternChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ClassPatternChildrenRef::DottedName(
                        _,
                    ) => {
                        Ok(
                            Self::DottedName(
                                DottedName::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ComparisonOperatorChildren {
        AnonymousBangEquals(AnonymousBangEquals),
        AnonymousEqualsEquals(AnonymousEqualsEquals),
        AnonymousGreaterThan(AnonymousGreaterThan),
        AnonymousGreaterThanEquals(AnonymousGreaterThanEquals),
        AnonymousIn(AnonymousIn),
        AnonymousIs(AnonymousIs),
        AnonymousIsNot(AnonymousIsNot),
        AnonymousLessThan(AnonymousLessThan),
        AnonymousLessThanEquals(AnonymousLessThanEquals),
        AnonymousLessThanGreaterThan(AnonymousLessThanGreaterThan),
        AnonymousNotIn(AnonymousNotIn),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        Call(Call),
        Comment(Comment),
        ConcatenatedString(ConcatenatedString),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        None(None),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl ComparisonOperatorChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::AnonymousBangEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousBangEquals(
                                AnonymousBangEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::AnonymousEqualsEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousEqualsEquals(
                                AnonymousEqualsEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::AnonymousGreaterThan(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousGreaterThan(
                                AnonymousGreaterThan::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::AnonymousGreaterThanEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousGreaterThanEquals(
                                AnonymousGreaterThanEquals::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::AnonymousIn(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousIn(
                                AnonymousIn::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::AnonymousIs(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousIs(
                                AnonymousIs::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::AnonymousIsNot(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousIsNot(
                                AnonymousIsNot::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::AnonymousLessThan(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousLessThan(
                                AnonymousLessThan::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::AnonymousLessThanEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousLessThanEquals(
                                AnonymousLessThanEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::AnonymousLessThanGreaterThan(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousLessThanGreaterThan(
                                AnonymousLessThanGreaterThan::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::AnonymousNotIn(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousNotIn(
                                AnonymousNotIn::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ComparisonOperatorOperators {
        AnonymousBangEquals(AnonymousBangEquals),
        AnonymousEqualsEquals(AnonymousEqualsEquals),
        AnonymousGreaterThan(AnonymousGreaterThan),
        AnonymousGreaterThanEquals(AnonymousGreaterThanEquals),
        AnonymousIn(AnonymousIn),
        AnonymousIs(AnonymousIs),
        AnonymousIsNot(AnonymousIsNot),
        AnonymousLessThan(AnonymousLessThan),
        AnonymousLessThanEquals(AnonymousLessThanEquals),
        AnonymousLessThanGreaterThan(AnonymousLessThanGreaterThan),
        AnonymousNotIn(AnonymousNotIn),
    }
    impl ComparisonOperatorOperators {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorOperatorsRef::AnonymousBangEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousBangEquals(
                                AnonymousBangEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorOperatorsRef::AnonymousEqualsEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousEqualsEquals(
                                AnonymousEqualsEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorOperatorsRef::AnonymousGreaterThan(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousGreaterThan(
                                AnonymousGreaterThan::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorOperatorsRef::AnonymousGreaterThanEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousGreaterThanEquals(
                                AnonymousGreaterThanEquals::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorOperatorsRef::AnonymousIn(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousIn(
                                AnonymousIn::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorOperatorsRef::AnonymousIs(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousIs(
                                AnonymousIs::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorOperatorsRef::AnonymousIsNot(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousIsNot(
                                AnonymousIsNot::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorOperatorsRef::AnonymousLessThan(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousLessThan(
                                AnonymousLessThan::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorOperatorsRef::AnonymousLessThanEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousLessThanEquals(
                                AnonymousLessThanEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorOperatorsRef::AnonymousLessThanGreaterThan(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousLessThanGreaterThan(
                                AnonymousLessThanGreaterThan::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComparisonOperatorOperatorsRef::AnonymousNotIn(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousNotIn(
                                AnonymousNotIn::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ComplexPatternChildren {
        Comment(Comment),
        Float(Float),
        Integer(Integer),
    }
    impl ComplexPatternChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComplexPatternChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComplexPatternChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ComplexPatternChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ConcatenatedStringChildren {
        Comment(Comment),
        String(String),
    }
    impl ConcatenatedStringChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConcatenatedStringChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConcatenatedStringChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ConditionalExpressionChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl ConditionalExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConditionalExpressionChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ConstrainedTypeChildren {
        Comment(Comment),
        Type(Type),
    }
    impl ConstrainedTypeChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConstrainedTypeChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ConstrainedTypeChildrenRef::Type(
                        _,
                    ) => Ok(Self::Type(Type::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum DecoratedDefinitionChildren {
        ClassDefinition(ClassDefinition),
        Comment(Comment),
        Decorator(Decorator),
        FunctionDefinition(FunctionDefinition),
    }
    impl DecoratedDefinitionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratedDefinitionChildrenRef::ClassDefinition(
                        _,
                    ) => {
                        Ok(
                            Self::ClassDefinition(
                                ClassDefinition::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratedDefinitionChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratedDefinitionChildrenRef::Decorator(
                        _,
                    ) => {
                        Ok(
                            Self::Decorator(
                                Decorator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratedDefinitionChildrenRef::FunctionDefinition(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionDefinition(
                                FunctionDefinition::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum DecoratedDefinitionDefinition {
        ClassDefinition(ClassDefinition),
        FunctionDefinition(FunctionDefinition),
    }
    impl DecoratedDefinitionDefinition {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratedDefinitionDefinitionRef::ClassDefinition(
                        _,
                    ) => {
                        Ok(
                            Self::ClassDefinition(
                                ClassDefinition::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratedDefinitionDefinitionRef::FunctionDefinition(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionDefinition(
                                FunctionDefinition::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum DecoratorChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl DecoratorChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DecoratorChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum DefaultParameterChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        TuplePattern(TuplePattern),
        UnaryOperator(UnaryOperator),
    }
    impl DefaultParameterChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum DefaultParameterName {
        Identifier(Identifier),
        TuplePattern(TuplePattern),
    }
    impl DefaultParameterName {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterNameRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DefaultParameterNameRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum DeleteStatementChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        ExpressionList(ExpressionList),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl DeleteStatementChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::ExpressionList(
                        _,
                    ) => {
                        Ok(
                            Self::ExpressionList(
                                ExpressionList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DeleteStatementChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum DictPatternChildren {
        AnonymousMinus(AnonymousMinus),
        AnonymousUnderscore(AnonymousUnderscore),
        CasePattern(CasePattern),
        ClassPattern(ClassPattern),
        Comment(Comment),
        ComplexPattern(ComplexPattern),
        ConcatenatedString(ConcatenatedString),
        DictPattern(DictPattern),
        DottedName(DottedName),
        False(False),
        Float(Float),
        Integer(Integer),
        ListPattern(ListPattern),
        None(None),
        SplatPattern(SplatPattern),
        String(String),
        True(True),
        TuplePattern(TuplePattern),
        UnionPattern(UnionPattern),
    }
    impl DictPatternChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternChildrenRef::AnonymousMinus(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousMinus(
                                AnonymousMinus::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternChildrenRef::AnonymousUnderscore(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousUnderscore(
                                AnonymousUnderscore::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternChildrenRef::CasePattern(
                        _,
                    ) => {
                        Ok(
                            Self::CasePattern(
                                CasePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternChildrenRef::ClassPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ClassPattern(
                                ClassPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternChildrenRef::ComplexPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ComplexPattern(
                                ComplexPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternChildrenRef::DictPattern(
                        _,
                    ) => {
                        Ok(
                            Self::DictPattern(
                                DictPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternChildrenRef::DottedName(
                        _,
                    ) => {
                        Ok(
                            Self::DottedName(
                                DottedName::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternChildrenRef::ListPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListPattern(
                                ListPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternChildrenRef::SplatPattern(
                        _,
                    ) => {
                        Ok(
                            Self::SplatPattern(
                                SplatPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternChildrenRef::UnionPattern(
                        _,
                    ) => {
                        Ok(
                            Self::UnionPattern(
                                UnionPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum DictPatternKey {
        AnonymousMinus(AnonymousMinus),
        AnonymousUnderscore(AnonymousUnderscore),
        ClassPattern(ClassPattern),
        ComplexPattern(ComplexPattern),
        ConcatenatedString(ConcatenatedString),
        DictPattern(DictPattern),
        DottedName(DottedName),
        False(False),
        Float(Float),
        Integer(Integer),
        ListPattern(ListPattern),
        None(None),
        SplatPattern(SplatPattern),
        String(String),
        True(True),
        TuplePattern(TuplePattern),
        UnionPattern(UnionPattern),
    }
    impl DictPatternKey {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternKeyRef::AnonymousMinus(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousMinus(
                                AnonymousMinus::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternKeyRef::AnonymousUnderscore(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousUnderscore(
                                AnonymousUnderscore::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternKeyRef::ClassPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ClassPattern(
                                ClassPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternKeyRef::ComplexPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ComplexPattern(
                                ComplexPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternKeyRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternKeyRef::DictPattern(
                        _,
                    ) => {
                        Ok(
                            Self::DictPattern(
                                DictPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternKeyRef::DottedName(
                        _,
                    ) => {
                        Ok(
                            Self::DottedName(
                                DottedName::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternKeyRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternKeyRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternKeyRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternKeyRef::ListPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListPattern(
                                ListPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternKeyRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternKeyRef::SplatPattern(
                        _,
                    ) => {
                        Ok(
                            Self::SplatPattern(
                                SplatPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternKeyRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternKeyRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternKeyRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictPatternKeyRef::UnionPattern(
                        _,
                    ) => {
                        Ok(
                            Self::UnionPattern(
                                UnionPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum DictionaryChildren {
        Comment(Comment),
        DictionarySplat(DictionarySplat),
        Pair(Pair),
    }
    impl DictionaryChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionaryChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionaryChildrenRef::DictionarySplat(
                        _,
                    ) => {
                        Ok(
                            Self::DictionarySplat(
                                DictionarySplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionaryChildrenRef::Pair(
                        _,
                    ) => Ok(Self::Pair(Pair::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum DictionaryComprehensionChildren {
        Comment(Comment),
        ForInClause(ForInClause),
        IfClause(IfClause),
        Pair(Pair),
    }
    impl DictionaryComprehensionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionaryComprehensionChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionaryComprehensionChildrenRef::ForInClause(
                        _,
                    ) => {
                        Ok(
                            Self::ForInClause(
                                ForInClause::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionaryComprehensionChildrenRef::IfClause(
                        _,
                    ) => Ok(Self::IfClause(IfClause::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionaryComprehensionChildrenRef::Pair(
                        _,
                    ) => Ok(Self::Pair(Pair::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum DictionarySplatChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl DictionarySplatChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum DictionarySplatPatternChildren {
        Attribute(Attribute),
        Comment(Comment),
        Identifier(Identifier),
        Subscript(Subscript),
    }
    impl DictionarySplatPatternChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatPatternChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatPatternChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatPatternChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DictionarySplatPatternChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum DottedNameChildren {
        Comment(Comment),
        Identifier(Identifier),
    }
    impl DottedNameChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DottedNameChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::DottedNameChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ElifClauseChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        Block(Block),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl ElifClauseChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElifClauseChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ElseClauseChildren {
        Block(Block),
        Comment(Comment),
    }
    impl ElseClauseChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElseClauseChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ElseClauseChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ExceptClauseChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        Block(Block),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl ExceptClauseChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptClauseChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ExceptGroupClauseChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        Block(Block),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl ExceptGroupClauseChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExceptGroupClauseChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ExecStatementChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl ExecStatementChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ExecStatementCode {
        Identifier(Identifier),
        String(String),
    }
    impl ExecStatementCode {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementCodeRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExecStatementCodeRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ExpressionListChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl ExpressionListChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionListChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ExpressionStatementChildren {
        AsPattern(AsPattern),
        Assignment(Assignment),
        Attribute(Attribute),
        AugmentedAssignment(AugmentedAssignment),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
        Yield(Yield),
    }
    impl ExpressionStatementChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::Assignment(
                        _,
                    ) => {
                        Ok(
                            Self::Assignment(
                                Assignment::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::AugmentedAssignment(
                        _,
                    ) => {
                        Ok(
                            Self::AugmentedAssignment(
                                AugmentedAssignment::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionStatementChildrenRef::Yield(
                        _,
                    ) => Ok(Self::Yield(Yield::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum FinallyClauseChildren {
        Block(Block),
        Comment(Comment),
    }
    impl FinallyClauseChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FinallyClauseChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FinallyClauseChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ForInClauseChildren {
        AnonymousComma(AnonymousComma),
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListPattern(ListPattern),
        ListSplat(ListSplat),
        ListSplatPattern(ListSplatPattern),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        PatternList(PatternList),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        TuplePattern(TuplePattern),
        UnaryOperator(UnaryOperator),
    }
    impl ForInClauseChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::AnonymousComma(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousComma(
                                AnonymousComma::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::ListPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListPattern(
                                ListPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::ListSplatPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplatPattern(
                                ListSplatPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::PatternList(
                        _,
                    ) => {
                        Ok(
                            Self::PatternList(
                                PatternList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ForInClauseLeft {
        Attribute(Attribute),
        Comment(Comment),
        Identifier(Identifier),
        ListPattern(ListPattern),
        ListSplatPattern(ListSplatPattern),
        PatternList(PatternList),
        Subscript(Subscript),
        TuplePattern(TuplePattern),
    }
    impl ForInClauseLeft {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseLeftRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseLeftRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseLeftRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseLeftRef::ListPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListPattern(
                                ListPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseLeftRef::ListSplatPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplatPattern(
                                ListSplatPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseLeftRef::PatternList(
                        _,
                    ) => {
                        Ok(
                            Self::PatternList(
                                PatternList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseLeftRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseLeftRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ForInClauseRight {
        AnonymousComma(AnonymousComma),
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl ForInClauseRight {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::AnonymousComma(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousComma(
                                AnonymousComma::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForInClauseRightRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ForStatementChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        Block(Block),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        ElseClause(ElseClause),
        ExpressionList(ExpressionList),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListPattern(ListPattern),
        ListSplat(ListSplat),
        ListSplatPattern(ListSplatPattern),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        PatternList(PatternList),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        TuplePattern(TuplePattern),
        UnaryOperator(UnaryOperator),
    }
    impl ForStatementChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::ElseClause(
                        _,
                    ) => {
                        Ok(
                            Self::ElseClause(
                                ElseClause::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::ExpressionList(
                        _,
                    ) => {
                        Ok(
                            Self::ExpressionList(
                                ExpressionList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::ListPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListPattern(
                                ListPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::ListSplatPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplatPattern(
                                ListSplatPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::PatternList(
                        _,
                    ) => {
                        Ok(
                            Self::PatternList(
                                PatternList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ForStatementLeft {
        Attribute(Attribute),
        Comment(Comment),
        Identifier(Identifier),
        ListPattern(ListPattern),
        ListSplatPattern(ListSplatPattern),
        PatternList(PatternList),
        Subscript(Subscript),
        TuplePattern(TuplePattern),
    }
    impl ForStatementLeft {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementLeftRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementLeftRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementLeftRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementLeftRef::ListPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListPattern(
                                ListPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementLeftRef::ListSplatPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplatPattern(
                                ListSplatPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementLeftRef::PatternList(
                        _,
                    ) => {
                        Ok(
                            Self::PatternList(
                                PatternList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementLeftRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementLeftRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ForStatementRight {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        ExpressionList(ExpressionList),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl ForStatementRight {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::ExpressionList(
                        _,
                    ) => {
                        Ok(
                            Self::ExpressionList(
                                ExpressionList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ForStatementRightRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum FormatExpressionChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        ExpressionList(ExpressionList),
        False(False),
        Float(Float),
        FormatSpecifier(FormatSpecifier),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        PatternList(PatternList),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        TypeConversion(TypeConversion),
        UnaryOperator(UnaryOperator),
        Yield(Yield),
    }
    impl FormatExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::ExpressionList(
                        _,
                    ) => {
                        Ok(
                            Self::ExpressionList(
                                ExpressionList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::FormatSpecifier(
                        _,
                    ) => {
                        Ok(
                            Self::FormatSpecifier(
                                FormatSpecifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::PatternList(
                        _,
                    ) => {
                        Ok(
                            Self::PatternList(
                                PatternList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::TypeConversion(
                        _,
                    ) => {
                        Ok(
                            Self::TypeConversion(
                                TypeConversion::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionChildrenRef::Yield(
                        _,
                    ) => Ok(Self::Yield(Yield::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum FormatExpressionExpression {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        ExpressionList(ExpressionList),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        PatternList(PatternList),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
        Yield(Yield),
    }
    impl FormatExpressionExpression {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::ExpressionList(
                        _,
                    ) => {
                        Ok(
                            Self::ExpressionList(
                                ExpressionList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::PatternList(
                        _,
                    ) => {
                        Ok(
                            Self::PatternList(
                                PatternList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatExpressionExpressionRef::Yield(
                        _,
                    ) => Ok(Self::Yield(Yield::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum FormatSpecifierChildren {
        Comment(Comment),
        FormatExpression(FormatExpression),
    }
    impl FormatSpecifierChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatSpecifierChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FormatSpecifierChildrenRef::FormatExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FormatExpression(
                                FormatExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum FunctionDefinitionChildren {
        Block(Block),
        Comment(Comment),
        Identifier(Identifier),
        Parameters(Parameters),
        Type(Type),
        TypeParameter(TypeParameter),
    }
    impl FunctionDefinitionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FunctionDefinitionChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FunctionDefinitionChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FunctionDefinitionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FunctionDefinitionChildrenRef::Parameters(
                        _,
                    ) => {
                        Ok(
                            Self::Parameters(
                                Parameters::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FunctionDefinitionChildrenRef::Type(
                        _,
                    ) => Ok(Self::Type(Type::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FunctionDefinitionChildrenRef::TypeParameter(
                        _,
                    ) => {
                        Ok(
                            Self::TypeParameter(
                                TypeParameter::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum FutureImportStatementChildren {
        AliasedImport(AliasedImport),
        Comment(Comment),
        DottedName(DottedName),
    }
    impl FutureImportStatementChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FutureImportStatementChildrenRef::AliasedImport(
                        _,
                    ) => {
                        Ok(
                            Self::AliasedImport(
                                AliasedImport::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FutureImportStatementChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FutureImportStatementChildrenRef::DottedName(
                        _,
                    ) => {
                        Ok(
                            Self::DottedName(
                                DottedName::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum FutureImportStatementName {
        AliasedImport(AliasedImport),
        DottedName(DottedName),
    }
    impl FutureImportStatementName {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FutureImportStatementNameRef::AliasedImport(
                        _,
                    ) => {
                        Ok(
                            Self::AliasedImport(
                                AliasedImport::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::FutureImportStatementNameRef::DottedName(
                        _,
                    ) => {
                        Ok(
                            Self::DottedName(
                                DottedName::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum GeneratorExpressionChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        ForInClause(ForInClause),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        IfClause(IfClause),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl GeneratorExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::ForInClause(
                        _,
                    ) => {
                        Ok(
                            Self::ForInClause(
                                ForInClause::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::IfClause(
                        _,
                    ) => Ok(Self::IfClause(IfClause::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GeneratorExpressionChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum GenericTypeChildren {
        Comment(Comment),
        Identifier(Identifier),
        TypeParameter(TypeParameter),
    }
    impl GenericTypeChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GenericTypeChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GenericTypeChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GenericTypeChildrenRef::TypeParameter(
                        _,
                    ) => {
                        Ok(
                            Self::TypeParameter(
                                TypeParameter::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum GlobalStatementChildren {
        Comment(Comment),
        Identifier(Identifier),
    }
    impl GlobalStatementChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GlobalStatementChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::GlobalStatementChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum IfClauseChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl IfClauseChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfClauseChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum IfStatementAlternative {
        ElifClause(ElifClause),
        ElseClause(ElseClause),
    }
    impl IfStatementAlternative {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementAlternativeRef::ElifClause(
                        _,
                    ) => {
                        Ok(
                            Self::ElifClause(
                                ElifClause::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementAlternativeRef::ElseClause(
                        _,
                    ) => {
                        Ok(
                            Self::ElseClause(
                                ElseClause::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum IfStatementChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        Block(Block),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        ElifClause(ElifClause),
        Ellipsis(Ellipsis),
        ElseClause(ElseClause),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl IfStatementChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::ElifClause(
                        _,
                    ) => {
                        Ok(
                            Self::ElifClause(
                                ElifClause::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::ElseClause(
                        _,
                    ) => {
                        Ok(
                            Self::ElseClause(
                                ElseClause::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::IfStatementChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ImportFromStatementChildren {
        AliasedImport(AliasedImport),
        Comment(Comment),
        DottedName(DottedName),
        RelativeImport(RelativeImport),
        WildcardImport(WildcardImport),
    }
    impl ImportFromStatementChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ImportFromStatementChildrenRef::AliasedImport(
                        _,
                    ) => {
                        Ok(
                            Self::AliasedImport(
                                AliasedImport::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ImportFromStatementChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ImportFromStatementChildrenRef::DottedName(
                        _,
                    ) => {
                        Ok(
                            Self::DottedName(
                                DottedName::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ImportFromStatementChildrenRef::RelativeImport(
                        _,
                    ) => {
                        Ok(
                            Self::RelativeImport(
                                RelativeImport::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ImportFromStatementChildrenRef::WildcardImport(
                        _,
                    ) => {
                        Ok(
                            Self::WildcardImport(
                                WildcardImport::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ImportFromStatementModuleName {
        DottedName(DottedName),
        RelativeImport(RelativeImport),
    }
    impl ImportFromStatementModuleName {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ImportFromStatementModuleNameRef::DottedName(
                        _,
                    ) => {
                        Ok(
                            Self::DottedName(
                                DottedName::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ImportFromStatementModuleNameRef::RelativeImport(
                        _,
                    ) => {
                        Ok(
                            Self::RelativeImport(
                                RelativeImport::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ImportFromStatementName {
        AliasedImport(AliasedImport),
        DottedName(DottedName),
    }
    impl ImportFromStatementName {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ImportFromStatementNameRef::AliasedImport(
                        _,
                    ) => {
                        Ok(
                            Self::AliasedImport(
                                AliasedImport::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ImportFromStatementNameRef::DottedName(
                        _,
                    ) => {
                        Ok(
                            Self::DottedName(
                                DottedName::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ImportStatementChildren {
        AliasedImport(AliasedImport),
        Comment(Comment),
        DottedName(DottedName),
    }
    impl ImportStatementChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ImportStatementChildrenRef::AliasedImport(
                        _,
                    ) => {
                        Ok(
                            Self::AliasedImport(
                                AliasedImport::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ImportStatementChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ImportStatementChildrenRef::DottedName(
                        _,
                    ) => {
                        Ok(
                            Self::DottedName(
                                DottedName::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ImportStatementName {
        AliasedImport(AliasedImport),
        DottedName(DottedName),
    }
    impl ImportStatementName {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ImportStatementNameRef::AliasedImport(
                        _,
                    ) => {
                        Ok(
                            Self::AliasedImport(
                                AliasedImport::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ImportStatementNameRef::DottedName(
                        _,
                    ) => {
                        Ok(
                            Self::DottedName(
                                DottedName::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum InterpolationChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        ExpressionList(ExpressionList),
        False(False),
        Float(Float),
        FormatSpecifier(FormatSpecifier),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        PatternList(PatternList),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        TypeConversion(TypeConversion),
        UnaryOperator(UnaryOperator),
        Yield(Yield),
    }
    impl InterpolationChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::ExpressionList(
                        _,
                    ) => {
                        Ok(
                            Self::ExpressionList(
                                ExpressionList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::FormatSpecifier(
                        _,
                    ) => {
                        Ok(
                            Self::FormatSpecifier(
                                FormatSpecifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::PatternList(
                        _,
                    ) => {
                        Ok(
                            Self::PatternList(
                                PatternList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::TypeConversion(
                        _,
                    ) => {
                        Ok(
                            Self::TypeConversion(
                                TypeConversion::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationChildrenRef::Yield(
                        _,
                    ) => Ok(Self::Yield(Yield::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum InterpolationExpression {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        ExpressionList(ExpressionList),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        PatternList(PatternList),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
        Yield(Yield),
    }
    impl InterpolationExpression {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::ExpressionList(
                        _,
                    ) => {
                        Ok(
                            Self::ExpressionList(
                                ExpressionList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::PatternList(
                        _,
                    ) => {
                        Ok(
                            Self::PatternList(
                                PatternList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::InterpolationExpressionRef::Yield(
                        _,
                    ) => Ok(Self::Yield(Yield::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum KeywordArgumentChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl KeywordArgumentChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordArgumentChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum KeywordPatternChildren {
        ClassPattern(ClassPattern),
        Comment(Comment),
        ComplexPattern(ComplexPattern),
        ConcatenatedString(ConcatenatedString),
        DictPattern(DictPattern),
        DottedName(DottedName),
        False(False),
        Float(Float),
        Identifier(Identifier),
        Integer(Integer),
        ListPattern(ListPattern),
        None(None),
        SplatPattern(SplatPattern),
        String(String),
        True(True),
        TuplePattern(TuplePattern),
        UnionPattern(UnionPattern),
    }
    impl KeywordPatternChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordPatternChildrenRef::ClassPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ClassPattern(
                                ClassPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordPatternChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordPatternChildrenRef::ComplexPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ComplexPattern(
                                ComplexPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordPatternChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordPatternChildrenRef::DictPattern(
                        _,
                    ) => {
                        Ok(
                            Self::DictPattern(
                                DictPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordPatternChildrenRef::DottedName(
                        _,
                    ) => {
                        Ok(
                            Self::DottedName(
                                DottedName::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordPatternChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordPatternChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordPatternChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordPatternChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordPatternChildrenRef::ListPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListPattern(
                                ListPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordPatternChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordPatternChildrenRef::SplatPattern(
                        _,
                    ) => {
                        Ok(
                            Self::SplatPattern(
                                SplatPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordPatternChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordPatternChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordPatternChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::KeywordPatternChildrenRef::UnionPattern(
                        _,
                    ) => {
                        Ok(
                            Self::UnionPattern(
                                UnionPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum LambdaChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        LambdaParameters(LambdaParameters),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl LambdaChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::LambdaParameters(
                        _,
                    ) => {
                        Ok(
                            Self::LambdaParameters(
                                LambdaParameters::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum LambdaParametersChildren {
        Comment(Comment),
        DefaultParameter(DefaultParameter),
        DictionarySplatPattern(DictionarySplatPattern),
        Identifier(Identifier),
        KeywordSeparator(KeywordSeparator),
        ListSplatPattern(ListSplatPattern),
        PositionalSeparator(PositionalSeparator),
        TuplePattern(TuplePattern),
        TypedDefaultParameter(TypedDefaultParameter),
        TypedParameter(TypedParameter),
    }
    impl LambdaParametersChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaParametersChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaParametersChildrenRef::DefaultParameter(
                        _,
                    ) => {
                        Ok(
                            Self::DefaultParameter(
                                DefaultParameter::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaParametersChildrenRef::DictionarySplatPattern(
                        _,
                    ) => {
                        Ok(
                            Self::DictionarySplatPattern(
                                DictionarySplatPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaParametersChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaParametersChildrenRef::KeywordSeparator(
                        _,
                    ) => {
                        Ok(
                            Self::KeywordSeparator(
                                KeywordSeparator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaParametersChildrenRef::ListSplatPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplatPattern(
                                ListSplatPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaParametersChildrenRef::PositionalSeparator(
                        _,
                    ) => {
                        Ok(
                            Self::PositionalSeparator(
                                PositionalSeparator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaParametersChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaParametersChildrenRef::TypedDefaultParameter(
                        _,
                    ) => {
                        Ok(
                            Self::TypedDefaultParameter(
                                TypedDefaultParameter::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::LambdaParametersChildrenRef::TypedParameter(
                        _,
                    ) => {
                        Ok(
                            Self::TypedParameter(
                                TypedParameter::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ListChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        ParenthesizedListSplat(ParenthesizedListSplat),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
        Yield(Yield),
    }
    impl ListChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::ParenthesizedListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedListSplat(
                                ParenthesizedListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListChildrenRef::Yield(
                        _,
                    ) => Ok(Self::Yield(Yield::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ListComprehensionChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        ForInClause(ForInClause),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        IfClause(IfClause),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl ListComprehensionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::ForInClause(
                        _,
                    ) => {
                        Ok(
                            Self::ForInClause(
                                ForInClause::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::IfClause(
                        _,
                    ) => Ok(Self::IfClause(IfClause::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListComprehensionChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ListPatternChildren {
        Attribute(Attribute),
        CasePattern(CasePattern),
        Comment(Comment),
        Identifier(Identifier),
        ListPattern(ListPattern),
        ListSplatPattern(ListSplatPattern),
        Subscript(Subscript),
        TuplePattern(TuplePattern),
    }
    impl ListPatternChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListPatternChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListPatternChildrenRef::CasePattern(
                        _,
                    ) => {
                        Ok(
                            Self::CasePattern(
                                CasePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListPatternChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListPatternChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListPatternChildrenRef::ListPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListPattern(
                                ListPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListPatternChildrenRef::ListSplatPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplatPattern(
                                ListSplatPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListPatternChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListPatternChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ListSplatChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl ListSplatChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ListSplatPatternChildren {
        Attribute(Attribute),
        Comment(Comment),
        Identifier(Identifier),
        Subscript(Subscript),
    }
    impl ListSplatPatternChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatPatternChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatPatternChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatPatternChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ListSplatPatternChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum MatchStatementChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        Block(Block),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl MatchStatementChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MatchStatementChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum MemberTypeChildren {
        Comment(Comment),
        Identifier(Identifier),
        Type(Type),
    }
    impl MemberTypeChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MemberTypeChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MemberTypeChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::MemberTypeChildrenRef::Type(
                        _,
                    ) => Ok(Self::Type(Type::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ModuleChildren {
        AssertStatement(AssertStatement),
        BreakStatement(BreakStatement),
        ClassDefinition(ClassDefinition),
        Comment(Comment),
        ContinueStatement(ContinueStatement),
        DecoratedDefinition(DecoratedDefinition),
        DeleteStatement(DeleteStatement),
        ExecStatement(ExecStatement),
        ExpressionStatement(ExpressionStatement),
        ForStatement(ForStatement),
        FunctionDefinition(FunctionDefinition),
        FutureImportStatement(FutureImportStatement),
        GlobalStatement(GlobalStatement),
        IfStatement(IfStatement),
        ImportFromStatement(ImportFromStatement),
        ImportStatement(ImportStatement),
        MatchStatement(MatchStatement),
        NonlocalStatement(NonlocalStatement),
        PassStatement(PassStatement),
        PrintStatement(PrintStatement),
        RaiseStatement(RaiseStatement),
        ReturnStatement(ReturnStatement),
        TryStatement(TryStatement),
        TypeAliasStatement(TypeAliasStatement),
        WhileStatement(WhileStatement),
        WithStatement(WithStatement),
    }
    impl ModuleChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ModuleChildrenRef::AssertStatement(
                        _,
                    ) => {
                        Ok(
                            Self::AssertStatement(
                                AssertStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ModuleChildrenRef::BreakStatement(
                        _,
                    ) => {
                        Ok(
                            Self::BreakStatement(
                                BreakStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ModuleChildrenRef::ClassDefinition(
                        _,
                    ) => {
                        Ok(
                            Self::ClassDefinition(
                                ClassDefinition::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ModuleChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ModuleChildrenRef::ContinueStatement(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueStatement(
                                ContinueStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ModuleChildrenRef::DecoratedDefinition(
                        _,
                    ) => {
                        Ok(
                            Self::DecoratedDefinition(
                                DecoratedDefinition::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ModuleChildrenRef::DeleteStatement(
                        _,
                    ) => {
                        Ok(
                            Self::DeleteStatement(
                                DeleteStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ModuleChildrenRef::ExecStatement(
                        _,
                    ) => {
                        Ok(
                            Self::ExecStatement(
                                ExecStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ModuleChildrenRef::ExpressionStatement(
                        _,
                    ) => {
                        Ok(
                            Self::ExpressionStatement(
                                ExpressionStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ModuleChildrenRef::ForStatement(
                        _,
                    ) => {
                        Ok(
                            Self::ForStatement(
                                ForStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ModuleChildrenRef::FunctionDefinition(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionDefinition(
                                FunctionDefinition::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ModuleChildrenRef::FutureImportStatement(
                        _,
                    ) => {
                        Ok(
                            Self::FutureImportStatement(
                                FutureImportStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ModuleChildrenRef::GlobalStatement(
                        _,
                    ) => {
                        Ok(
                            Self::GlobalStatement(
                                GlobalStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ModuleChildrenRef::IfStatement(
                        _,
                    ) => {
                        Ok(
                            Self::IfStatement(
                                IfStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ModuleChildrenRef::ImportFromStatement(
                        _,
                    ) => {
                        Ok(
                            Self::ImportFromStatement(
                                ImportFromStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ModuleChildrenRef::ImportStatement(
                        _,
                    ) => {
                        Ok(
                            Self::ImportStatement(
                                ImportStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ModuleChildrenRef::MatchStatement(
                        _,
                    ) => {
                        Ok(
                            Self::MatchStatement(
                                MatchStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ModuleChildrenRef::NonlocalStatement(
                        _,
                    ) => {
                        Ok(
                            Self::NonlocalStatement(
                                NonlocalStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ModuleChildrenRef::PassStatement(
                        _,
                    ) => {
                        Ok(
                            Self::PassStatement(
                                PassStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ModuleChildrenRef::PrintStatement(
                        _,
                    ) => {
                        Ok(
                            Self::PrintStatement(
                                PrintStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ModuleChildrenRef::RaiseStatement(
                        _,
                    ) => {
                        Ok(
                            Self::RaiseStatement(
                                RaiseStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ModuleChildrenRef::ReturnStatement(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnStatement(
                                ReturnStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ModuleChildrenRef::TryStatement(
                        _,
                    ) => {
                        Ok(
                            Self::TryStatement(
                                TryStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ModuleChildrenRef::TypeAliasStatement(
                        _,
                    ) => {
                        Ok(
                            Self::TypeAliasStatement(
                                TypeAliasStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ModuleChildrenRef::WhileStatement(
                        _,
                    ) => {
                        Ok(
                            Self::WhileStatement(
                                WhileStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ModuleChildrenRef::WithStatement(
                        _,
                    ) => {
                        Ok(
                            Self::WithStatement(
                                WithStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum NamedExpressionChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl NamedExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NamedExpressionChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum NonlocalStatementChildren {
        Comment(Comment),
        Identifier(Identifier),
    }
    impl NonlocalStatementChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NonlocalStatementChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NonlocalStatementChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum NotOperatorChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl NotOperatorChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::NotOperatorChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum PairChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl PairChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PairChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ParametersChildren {
        Comment(Comment),
        DefaultParameter(DefaultParameter),
        DictionarySplatPattern(DictionarySplatPattern),
        Identifier(Identifier),
        KeywordSeparator(KeywordSeparator),
        ListSplatPattern(ListSplatPattern),
        PositionalSeparator(PositionalSeparator),
        TuplePattern(TuplePattern),
        TypedDefaultParameter(TypedDefaultParameter),
        TypedParameter(TypedParameter),
    }
    impl ParametersChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParametersChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParametersChildrenRef::DefaultParameter(
                        _,
                    ) => {
                        Ok(
                            Self::DefaultParameter(
                                DefaultParameter::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParametersChildrenRef::DictionarySplatPattern(
                        _,
                    ) => {
                        Ok(
                            Self::DictionarySplatPattern(
                                DictionarySplatPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParametersChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParametersChildrenRef::KeywordSeparator(
                        _,
                    ) => {
                        Ok(
                            Self::KeywordSeparator(
                                KeywordSeparator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParametersChildrenRef::ListSplatPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplatPattern(
                                ListSplatPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParametersChildrenRef::PositionalSeparator(
                        _,
                    ) => {
                        Ok(
                            Self::PositionalSeparator(
                                PositionalSeparator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParametersChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParametersChildrenRef::TypedDefaultParameter(
                        _,
                    ) => {
                        Ok(
                            Self::TypedDefaultParameter(
                                TypedDefaultParameter::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParametersChildrenRef::TypedParameter(
                        _,
                    ) => {
                        Ok(
                            Self::TypedParameter(
                                TypedParameter::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ParenthesizedExpressionChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
        Yield(Yield),
    }
    impl ParenthesizedExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedExpressionChildrenRef::Yield(
                        _,
                    ) => Ok(Self::Yield(Yield::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ParenthesizedListSplatChildren {
        Comment(Comment),
        ListSplat(ListSplat),
        ParenthesizedExpression(ParenthesizedExpression),
    }
    impl ParenthesizedListSplatChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedListSplatChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedListSplatChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParenthesizedListSplatChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum PatternListChildren {
        Attribute(Attribute),
        Comment(Comment),
        Identifier(Identifier),
        ListPattern(ListPattern),
        ListSplatPattern(ListSplatPattern),
        Subscript(Subscript),
        TuplePattern(TuplePattern),
    }
    impl PatternListChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PatternListChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PatternListChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PatternListChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PatternListChildrenRef::ListPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListPattern(
                                ListPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PatternListChildrenRef::ListSplatPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplatPattern(
                                ListSplatPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PatternListChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PatternListChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum PrintStatementChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Chevron(Chevron),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl PrintStatementChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::Chevron(
                        _,
                    ) => Ok(Self::Chevron(Chevron::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrintStatementChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum RaiseStatementChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        ExpressionList(ExpressionList),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl RaiseStatementChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::ExpressionList(
                        _,
                    ) => {
                        Ok(
                            Self::ExpressionList(
                                ExpressionList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RaiseStatementChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum RelativeImportChildren {
        Comment(Comment),
        DottedName(DottedName),
        ImportPrefix(ImportPrefix),
    }
    impl RelativeImportChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RelativeImportChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RelativeImportChildrenRef::DottedName(
                        _,
                    ) => {
                        Ok(
                            Self::DottedName(
                                DottedName::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::RelativeImportChildrenRef::ImportPrefix(
                        _,
                    ) => {
                        Ok(
                            Self::ImportPrefix(
                                ImportPrefix::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ReturnStatementChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        ExpressionList(ExpressionList),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl ReturnStatementChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::ExpressionList(
                        _,
                    ) => {
                        Ok(
                            Self::ExpressionList(
                                ExpressionList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ReturnStatementChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum SetChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        ParenthesizedListSplat(ParenthesizedListSplat),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
        Yield(Yield),
    }
    impl SetChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::ParenthesizedListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedListSplat(
                                ParenthesizedListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetChildrenRef::Yield(
                        _,
                    ) => Ok(Self::Yield(Yield::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum SetComprehensionChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        ForInClause(ForInClause),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        IfClause(IfClause),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl SetComprehensionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::ForInClause(
                        _,
                    ) => {
                        Ok(
                            Self::ForInClause(
                                ForInClause::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::IfClause(
                        _,
                    ) => Ok(Self::IfClause(IfClause::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SetComprehensionChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum SliceChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl SliceChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SliceChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum SplatPatternChildren {
        Comment(Comment),
        Identifier(Identifier),
    }
    impl SplatPatternChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SplatPatternChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SplatPatternChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum SplatTypeChildren {
        Comment(Comment),
        Identifier(Identifier),
    }
    impl SplatTypeChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SplatTypeChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SplatTypeChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum StringChildren {
        Comment(Comment),
        Interpolation(Interpolation),
        StringContent(StringContent),
        StringEnd(StringEnd),
        StringStart(StringStart),
    }
    impl StringChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::StringChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::StringChildrenRef::Interpolation(
                        _,
                    ) => {
                        Ok(
                            Self::Interpolation(
                                Interpolation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::StringChildrenRef::StringContent(
                        _,
                    ) => {
                        Ok(
                            Self::StringContent(
                                StringContent::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::StringChildrenRef::StringEnd(
                        _,
                    ) => {
                        Ok(
                            Self::StringEnd(
                                StringEnd::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::StringChildrenRef::StringStart(
                        _,
                    ) => {
                        Ok(
                            Self::StringStart(
                                StringStart::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum StringContentChildren {
        Comment(Comment),
        EscapeInterpolation(EscapeInterpolation),
        EscapeSequence(EscapeSequence),
    }
    impl StringContentChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::StringContentChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::StringContentChildrenRef::EscapeInterpolation(
                        _,
                    ) => {
                        Ok(
                            Self::EscapeInterpolation(
                                EscapeInterpolation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::StringContentChildrenRef::EscapeSequence(
                        _,
                    ) => {
                        Ok(
                            Self::EscapeSequence(
                                EscapeSequence::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum SubscriptChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        Slice(Slice),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl SubscriptChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::Slice(
                        _,
                    ) => Ok(Self::Slice(Slice::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum SubscriptSubscript {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        Slice(Slice),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl SubscriptSubscript {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::Slice(
                        _,
                    ) => Ok(Self::Slice(Slice::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SubscriptSubscriptRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum TryStatementChildren {
        Block(Block),
        Comment(Comment),
        ElseClause(ElseClause),
        ExceptClause(ExceptClause),
        ExceptGroupClause(ExceptGroupClause),
        FinallyClause(FinallyClause),
    }
    impl TryStatementChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TryStatementChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TryStatementChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TryStatementChildrenRef::ElseClause(
                        _,
                    ) => {
                        Ok(
                            Self::ElseClause(
                                ElseClause::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TryStatementChildrenRef::ExceptClause(
                        _,
                    ) => {
                        Ok(
                            Self::ExceptClause(
                                ExceptClause::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TryStatementChildrenRef::ExceptGroupClause(
                        _,
                    ) => {
                        Ok(
                            Self::ExceptGroupClause(
                                ExceptGroupClause::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TryStatementChildrenRef::FinallyClause(
                        _,
                    ) => {
                        Ok(
                            Self::FinallyClause(
                                FinallyClause::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum TupleChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        ParenthesizedListSplat(ParenthesizedListSplat),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
        Yield(Yield),
    }
    impl TupleChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::ParenthesizedListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedListSplat(
                                ParenthesizedListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TupleChildrenRef::Yield(
                        _,
                    ) => Ok(Self::Yield(Yield::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum TuplePatternChildren {
        Attribute(Attribute),
        CasePattern(CasePattern),
        Comment(Comment),
        Identifier(Identifier),
        ListPattern(ListPattern),
        ListSplatPattern(ListSplatPattern),
        Subscript(Subscript),
        TuplePattern(TuplePattern),
    }
    impl TuplePatternChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TuplePatternChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TuplePatternChildrenRef::CasePattern(
                        _,
                    ) => {
                        Ok(
                            Self::CasePattern(
                                CasePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TuplePatternChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TuplePatternChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TuplePatternChildrenRef::ListPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListPattern(
                                ListPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TuplePatternChildrenRef::ListSplatPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplatPattern(
                                ListSplatPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TuplePatternChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TuplePatternChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum TypeAliasStatementChildren {
        Comment(Comment),
        Type(Type),
    }
    impl TypeAliasStatementChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeAliasStatementChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeAliasStatementChildrenRef::Type(
                        _,
                    ) => Ok(Self::Type(Type::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum TypeChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        ConstrainedType(ConstrainedType),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        GenericType(GenericType),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        MemberType(MemberType),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        SplatType(SplatType),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
        UnionType(UnionType),
    }
    impl TypeChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::ConstrainedType(
                        _,
                    ) => {
                        Ok(
                            Self::ConstrainedType(
                                ConstrainedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::MemberType(
                        _,
                    ) => {
                        Ok(
                            Self::MemberType(
                                MemberType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::SplatType(
                        _,
                    ) => {
                        Ok(
                            Self::SplatType(
                                SplatType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeChildrenRef::UnionType(
                        _,
                    ) => {
                        Ok(
                            Self::UnionType(
                                UnionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum TypeParameterChildren {
        Comment(Comment),
        Type(Type),
    }
    impl TypeParameterChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeParameterChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypeParameterChildrenRef::Type(
                        _,
                    ) => Ok(Self::Type(Type::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum TypedDefaultParameterChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        Type(Type),
        UnaryOperator(UnaryOperator),
    }
    impl TypedDefaultParameterChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::Type(
                        _,
                    ) => Ok(Self::Type(Type::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedDefaultParameterChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum TypedParameterChildren {
        Comment(Comment),
        DictionarySplatPattern(DictionarySplatPattern),
        Identifier(Identifier),
        ListSplatPattern(ListSplatPattern),
        Type(Type),
    }
    impl TypedParameterChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedParameterChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedParameterChildrenRef::DictionarySplatPattern(
                        _,
                    ) => {
                        Ok(
                            Self::DictionarySplatPattern(
                                DictionarySplatPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedParameterChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedParameterChildrenRef::ListSplatPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplatPattern(
                                ListSplatPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::TypedParameterChildrenRef::Type(
                        _,
                    ) => Ok(Self::Type(Type::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum UnaryOperatorChildren {
        AnonymousMinus(AnonymousMinus),
        AnonymousPlus(AnonymousPlus),
        AnonymousTilde(AnonymousTilde),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        Call(Call),
        Comment(Comment),
        ConcatenatedString(ConcatenatedString),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        None(None),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl UnaryOperatorChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorChildrenRef::AnonymousMinus(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousMinus(
                                AnonymousMinus::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorChildrenRef::AnonymousPlus(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousPlus(
                                AnonymousPlus::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorChildrenRef::AnonymousTilde(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousTilde(
                                AnonymousTilde::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum UnaryOperatorOperator {
        AnonymousMinus(AnonymousMinus),
        AnonymousPlus(AnonymousPlus),
        AnonymousTilde(AnonymousTilde),
    }
    impl UnaryOperatorOperator {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorOperatorRef::AnonymousMinus(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousMinus(
                                AnonymousMinus::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorOperatorRef::AnonymousPlus(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousPlus(
                                AnonymousPlus::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnaryOperatorOperatorRef::AnonymousTilde(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousTilde(
                                AnonymousTilde::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum UnionPatternChildren {
        ClassPattern(ClassPattern),
        Comment(Comment),
        ComplexPattern(ComplexPattern),
        ConcatenatedString(ConcatenatedString),
        DictPattern(DictPattern),
        DottedName(DottedName),
        False(False),
        Float(Float),
        Integer(Integer),
        ListPattern(ListPattern),
        None(None),
        SplatPattern(SplatPattern),
        String(String),
        True(True),
        TuplePattern(TuplePattern),
        UnionPattern(UnionPattern),
    }
    impl UnionPatternChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnionPatternChildrenRef::ClassPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ClassPattern(
                                ClassPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnionPatternChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnionPatternChildrenRef::ComplexPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ComplexPattern(
                                ComplexPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnionPatternChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnionPatternChildrenRef::DictPattern(
                        _,
                    ) => {
                        Ok(
                            Self::DictPattern(
                                DictPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnionPatternChildrenRef::DottedName(
                        _,
                    ) => {
                        Ok(
                            Self::DottedName(
                                DottedName::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnionPatternChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnionPatternChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnionPatternChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnionPatternChildrenRef::ListPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListPattern(
                                ListPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnionPatternChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnionPatternChildrenRef::SplatPattern(
                        _,
                    ) => {
                        Ok(
                            Self::SplatPattern(
                                SplatPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnionPatternChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnionPatternChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnionPatternChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnionPatternChildrenRef::UnionPattern(
                        _,
                    ) => {
                        Ok(
                            Self::UnionPattern(
                                UnionPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum UnionTypeChildren {
        Comment(Comment),
        Type(Type),
    }
    impl UnionTypeChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnionTypeChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::UnionTypeChildrenRef::Type(
                        _,
                    ) => Ok(Self::Type(Type::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum WhileStatementChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        Block(Block),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        ElseClause(ElseClause),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl WhileStatementChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::ElseClause(
                        _,
                    ) => {
                        Ok(
                            Self::ElseClause(
                                ElseClause::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WhileStatementChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum WithClauseChildren {
        Comment(Comment),
        WithItem(WithItem),
    }
    impl WithClauseChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithClauseChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithClauseChildrenRef::WithItem(
                        _,
                    ) => Ok(Self::WithItem(WithItem::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum WithItemChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl WithItemChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithItemChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum WithStatementChildren {
        Block(Block),
        Comment(Comment),
        WithClause(WithClause),
    }
    impl WithStatementChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithStatementChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithStatementChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::WithStatementChildrenRef::WithClause(
                        _,
                    ) => {
                        Ok(
                            Self::WithClause(
                                WithClause::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum YieldChildren {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        ExpressionList(ExpressionList),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl YieldChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::ExpressionList(
                        _,
                    ) => {
                        Ok(
                            Self::ExpressionList(
                                ExpressionList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::YieldChildrenRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum CompoundStatement {
        ClassDefinition(ClassDefinition),
        DecoratedDefinition(DecoratedDefinition),
        ForStatement(ForStatement),
        FunctionDefinition(FunctionDefinition),
        IfStatement(IfStatement),
        MatchStatement(MatchStatement),
        TryStatement(TryStatement),
        WhileStatement(WhileStatement),
        WithStatement(WithStatement),
    }
    impl CompoundStatement {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CompoundStatementRef::ClassDefinition(
                        _,
                    ) => {
                        Ok(
                            Self::ClassDefinition(
                                ClassDefinition::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CompoundStatementRef::DecoratedDefinition(
                        _,
                    ) => {
                        Ok(
                            Self::DecoratedDefinition(
                                DecoratedDefinition::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CompoundStatementRef::ForStatement(
                        _,
                    ) => {
                        Ok(
                            Self::ForStatement(
                                ForStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CompoundStatementRef::FunctionDefinition(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionDefinition(
                                FunctionDefinition::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CompoundStatementRef::IfStatement(
                        _,
                    ) => {
                        Ok(
                            Self::IfStatement(
                                IfStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CompoundStatementRef::MatchStatement(
                        _,
                    ) => {
                        Ok(
                            Self::MatchStatement(
                                MatchStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CompoundStatementRef::TryStatement(
                        _,
                    ) => {
                        Ok(
                            Self::TryStatement(
                                TryStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CompoundStatementRef::WhileStatement(
                        _,
                    ) => {
                        Ok(
                            Self::WhileStatement(
                                WhileStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::CompoundStatementRef::WithStatement(
                        _,
                    ) => {
                        Ok(
                            Self::WithStatement(
                                WithStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum SimpleStatement {
        AssertStatement(AssertStatement),
        BreakStatement(BreakStatement),
        ContinueStatement(ContinueStatement),
        DeleteStatement(DeleteStatement),
        ExecStatement(ExecStatement),
        ExpressionStatement(ExpressionStatement),
        FutureImportStatement(FutureImportStatement),
        GlobalStatement(GlobalStatement),
        ImportFromStatement(ImportFromStatement),
        ImportStatement(ImportStatement),
        NonlocalStatement(NonlocalStatement),
        PassStatement(PassStatement),
        PrintStatement(PrintStatement),
        RaiseStatement(RaiseStatement),
        ReturnStatement(ReturnStatement),
        TypeAliasStatement(TypeAliasStatement),
    }
    impl SimpleStatement {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SimpleStatementRef::AssertStatement(
                        _,
                    ) => {
                        Ok(
                            Self::AssertStatement(
                                AssertStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SimpleStatementRef::BreakStatement(
                        _,
                    ) => {
                        Ok(
                            Self::BreakStatement(
                                BreakStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SimpleStatementRef::ContinueStatement(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueStatement(
                                ContinueStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SimpleStatementRef::DeleteStatement(
                        _,
                    ) => {
                        Ok(
                            Self::DeleteStatement(
                                DeleteStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SimpleStatementRef::ExecStatement(
                        _,
                    ) => {
                        Ok(
                            Self::ExecStatement(
                                ExecStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SimpleStatementRef::ExpressionStatement(
                        _,
                    ) => {
                        Ok(
                            Self::ExpressionStatement(
                                ExpressionStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SimpleStatementRef::FutureImportStatement(
                        _,
                    ) => {
                        Ok(
                            Self::FutureImportStatement(
                                FutureImportStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SimpleStatementRef::GlobalStatement(
                        _,
                    ) => {
                        Ok(
                            Self::GlobalStatement(
                                GlobalStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SimpleStatementRef::ImportFromStatement(
                        _,
                    ) => {
                        Ok(
                            Self::ImportFromStatement(
                                ImportFromStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SimpleStatementRef::ImportStatement(
                        _,
                    ) => {
                        Ok(
                            Self::ImportStatement(
                                ImportStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SimpleStatementRef::NonlocalStatement(
                        _,
                    ) => {
                        Ok(
                            Self::NonlocalStatement(
                                NonlocalStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SimpleStatementRef::PassStatement(
                        _,
                    ) => {
                        Ok(
                            Self::PassStatement(
                                PassStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SimpleStatementRef::PrintStatement(
                        _,
                    ) => {
                        Ok(
                            Self::PrintStatement(
                                PrintStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SimpleStatementRef::RaiseStatement(
                        _,
                    ) => {
                        Ok(
                            Self::RaiseStatement(
                                RaiseStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SimpleStatementRef::ReturnStatement(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnStatement(
                                ReturnStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::SimpleStatementRef::TypeAliasStatement(
                        _,
                    ) => {
                        Ok(
                            Self::TypeAliasStatement(
                                TypeAliasStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum Expression {
        AsPattern(AsPattern),
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        BooleanOperator(BooleanOperator),
        Call(Call),
        Comment(Comment),
        ComparisonOperator(ComparisonOperator),
        ConcatenatedString(ConcatenatedString),
        ConditionalExpression(ConditionalExpression),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        Lambda(Lambda),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        NamedExpression(NamedExpression),
        None(None),
        NotOperator(NotOperator),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl Expression {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::AsPattern(
                        _,
                    ) => {
                        Ok(
                            Self::AsPattern(
                                AsPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::BooleanOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanOperator(
                                BooleanOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::Comment(
                        _,
                    ) => Ok(Self::Comment(Comment::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::ComparisonOperator(
                        _,
                    ) => {
                        Ok(
                            Self::ComparisonOperator(
                                ComparisonOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::ConditionalExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ConditionalExpression(
                                ConditionalExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::Lambda(
                        _,
                    ) => Ok(Self::Lambda(Lambda::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::NamedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::NamedExpression(
                                NamedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::NotOperator(
                        _,
                    ) => {
                        Ok(
                            Self::NotOperator(
                                NotOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ExpressionRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum Parameter {
        DefaultParameter(DefaultParameter),
        DictionarySplatPattern(DictionarySplatPattern),
        Identifier(Identifier),
        KeywordSeparator(KeywordSeparator),
        ListSplatPattern(ListSplatPattern),
        PositionalSeparator(PositionalSeparator),
        TuplePattern(TuplePattern),
        TypedDefaultParameter(TypedDefaultParameter),
        TypedParameter(TypedParameter),
    }
    impl Parameter {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParameterRef::DefaultParameter(
                        _,
                    ) => {
                        Ok(
                            Self::DefaultParameter(
                                DefaultParameter::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParameterRef::DictionarySplatPattern(
                        _,
                    ) => {
                        Ok(
                            Self::DictionarySplatPattern(
                                DictionarySplatPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParameterRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParameterRef::KeywordSeparator(
                        _,
                    ) => {
                        Ok(
                            Self::KeywordSeparator(
                                KeywordSeparator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParameterRef::ListSplatPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplatPattern(
                                ListSplatPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParameterRef::PositionalSeparator(
                        _,
                    ) => {
                        Ok(
                            Self::PositionalSeparator(
                                PositionalSeparator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParameterRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParameterRef::TypedDefaultParameter(
                        _,
                    ) => {
                        Ok(
                            Self::TypedDefaultParameter(
                                TypedDefaultParameter::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::ParameterRef::TypedParameter(
                        _,
                    ) => {
                        Ok(
                            Self::TypedParameter(
                                TypedParameter::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum Pattern {
        Attribute(Attribute),
        Identifier(Identifier),
        ListPattern(ListPattern),
        ListSplatPattern(ListSplatPattern),
        Subscript(Subscript),
        TuplePattern(TuplePattern),
    }
    impl Pattern {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PatternRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PatternRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PatternRef::ListPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListPattern(
                                ListPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PatternRef::ListSplatPattern(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplatPattern(
                                ListSplatPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PatternRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PatternRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum PrimaryExpression {
        Attribute(Attribute),
        Await(Await),
        BinaryOperator(BinaryOperator),
        Call(Call),
        ConcatenatedString(ConcatenatedString),
        Dictionary(Dictionary),
        DictionaryComprehension(DictionaryComprehension),
        Ellipsis(Ellipsis),
        False(False),
        Float(Float),
        GeneratorExpression(GeneratorExpression),
        Identifier(Identifier),
        Integer(Integer),
        List(List),
        ListComprehension(ListComprehension),
        ListSplat(ListSplat),
        None(None),
        ParenthesizedExpression(ParenthesizedExpression),
        Set(Set),
        SetComprehension(SetComprehension),
        String(String),
        Subscript(Subscript),
        True(True),
        Tuple(Tuple),
        UnaryOperator(UnaryOperator),
    }
    impl PrimaryExpression {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrimaryExpressionRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrimaryExpressionRef::Await(
                        _,
                    ) => Ok(Self::Await(Await::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrimaryExpressionRef::BinaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryOperator(
                                BinaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrimaryExpressionRef::Call(
                        _,
                    ) => Ok(Self::Call(Call::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrimaryExpressionRef::ConcatenatedString(
                        _,
                    ) => {
                        Ok(
                            Self::ConcatenatedString(
                                ConcatenatedString::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrimaryExpressionRef::Dictionary(
                        _,
                    ) => {
                        Ok(
                            Self::Dictionary(
                                Dictionary::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrimaryExpressionRef::DictionaryComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::DictionaryComprehension(
                                DictionaryComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrimaryExpressionRef::Ellipsis(
                        _,
                    ) => Ok(Self::Ellipsis(Ellipsis::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrimaryExpressionRef::False(
                        _,
                    ) => Ok(Self::False(False::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrimaryExpressionRef::Float(
                        _,
                    ) => Ok(Self::Float(Float::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrimaryExpressionRef::GeneratorExpression(
                        _,
                    ) => {
                        Ok(
                            Self::GeneratorExpression(
                                GeneratorExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrimaryExpressionRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrimaryExpressionRef::Integer(
                        _,
                    ) => Ok(Self::Integer(Integer::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrimaryExpressionRef::List(
                        _,
                    ) => Ok(Self::List(List::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrimaryExpressionRef::ListComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::ListComprehension(
                                ListComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrimaryExpressionRef::ListSplat(
                        _,
                    ) => {
                        Ok(
                            Self::ListSplat(
                                ListSplat::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrimaryExpressionRef::None(
                        _,
                    ) => Ok(Self::None(None::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrimaryExpressionRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrimaryExpressionRef::Set(
                        _,
                    ) => Ok(Self::Set(Set::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrimaryExpressionRef::SetComprehension(
                        _,
                    ) => {
                        Ok(
                            Self::SetComprehension(
                                SetComprehension::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrimaryExpressionRef::String(
                        _,
                    ) => Ok(Self::String(String::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrimaryExpressionRef::Subscript(
                        _,
                    ) => {
                        Ok(
                            Self::Subscript(
                                Subscript::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrimaryExpressionRef::True(
                        _,
                    ) => Ok(Self::True(True::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrimaryExpressionRef::Tuple(
                        _,
                    ) => Ok(Self::Tuple(Tuple::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_python::cst::PrimaryExpressionRef::UnaryOperator(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryOperator(
                                UnaryOperator::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    pub fn register_cst(parent_module: &Bound<'_, PyModule>) -> PyResult<()> {
        let child_module = PyModule::new(parent_module.py(), "cst")?;
        child_module.add_class::<AliasedImport>()?;
        child_module.add_class::<AnonymousAmpersand>()?;
        child_module.add_class::<AnonymousAmpersandEquals>()?;
        child_module.add_class::<AnonymousAnd>()?;
        child_module.add_class::<AnonymousAs>()?;
        child_module.add_class::<AnonymousAssert>()?;
        child_module.add_class::<AnonymousAsterisk>()?;
        child_module.add_class::<AnonymousAsteriskAsterisk>()?;
        child_module.add_class::<AnonymousAsteriskAsteriskEquals>()?;
        child_module.add_class::<AnonymousAsteriskEquals>()?;
        child_module.add_class::<AnonymousAsync>()?;
        child_module.add_class::<AnonymousAt>()?;
        child_module.add_class::<AnonymousAtEquals>()?;
        child_module.add_class::<AnonymousAwait>()?;
        child_module.add_class::<AnonymousBackslash>()?;
        child_module.add_class::<AnonymousBangEquals>()?;
        child_module.add_class::<AnonymousBreak>()?;
        child_module.add_class::<AnonymousCaret>()?;
        child_module.add_class::<AnonymousCaretEquals>()?;
        child_module.add_class::<AnonymousCase>()?;
        child_module.add_class::<AnonymousClass>()?;
        child_module.add_class::<AnonymousCloseBrace>()?;
        child_module.add_class::<AnonymousCloseBracket>()?;
        child_module.add_class::<AnonymousCloseParen>()?;
        child_module.add_class::<AnonymousColon>()?;
        child_module.add_class::<AnonymousColonEquals>()?;
        child_module.add_class::<AnonymousComma>()?;
        child_module.add_class::<AnonymousContinue>()?;
        child_module.add_class::<AnonymousDef>()?;
        child_module.add_class::<AnonymousDel>()?;
        child_module.add_class::<AnonymousDot>()?;
        child_module.add_class::<AnonymousElif>()?;
        child_module.add_class::<AnonymousElse>()?;
        child_module.add_class::<AnonymousEquals>()?;
        child_module.add_class::<AnonymousEqualsEquals>()?;
        child_module.add_class::<AnonymousExcept>()?;
        child_module.add_class::<AnonymousExceptAsterisk>()?;
        child_module.add_class::<AnonymousExec>()?;
        child_module.add_class::<AnonymousFinally>()?;
        child_module.add_class::<AnonymousFor>()?;
        child_module.add_class::<AnonymousFrom>()?;
        child_module.add_class::<AnonymousFuture>()?;
        child_module.add_class::<AnonymousGlobal>()?;
        child_module.add_class::<AnonymousGreaterThan>()?;
        child_module.add_class::<AnonymousGreaterThanEquals>()?;
        child_module.add_class::<AnonymousGreaterThanGreaterThan>()?;
        child_module.add_class::<AnonymousGreaterThanGreaterThanEquals>()?;
        child_module.add_class::<AnonymousIf>()?;
        child_module.add_class::<AnonymousImport>()?;
        child_module.add_class::<AnonymousIn>()?;
        child_module.add_class::<AnonymousIs>()?;
        child_module.add_class::<AnonymousIsNot>()?;
        child_module.add_class::<AnonymousLambda>()?;
        child_module.add_class::<AnonymousLessThan>()?;
        child_module.add_class::<AnonymousLessThanEquals>()?;
        child_module.add_class::<AnonymousLessThanGreaterThan>()?;
        child_module.add_class::<AnonymousLessThanLessThan>()?;
        child_module.add_class::<AnonymousLessThanLessThanEquals>()?;
        child_module.add_class::<AnonymousMatch>()?;
        child_module.add_class::<AnonymousMinus>()?;
        child_module.add_class::<AnonymousMinusEquals>()?;
        child_module.add_class::<AnonymousMinusGreaterThan>()?;
        child_module.add_class::<AnonymousNonlocal>()?;
        child_module.add_class::<AnonymousNot>()?;
        child_module.add_class::<AnonymousNotIn>()?;
        child_module.add_class::<AnonymousOpenBrace>()?;
        child_module.add_class::<AnonymousOpenBracket>()?;
        child_module.add_class::<AnonymousOpenParen>()?;
        child_module.add_class::<AnonymousOr>()?;
        child_module.add_class::<AnonymousPass>()?;
        child_module.add_class::<AnonymousPercent>()?;
        child_module.add_class::<AnonymousPercentEquals>()?;
        child_module.add_class::<AnonymousPipe>()?;
        child_module.add_class::<AnonymousPipeEquals>()?;
        child_module.add_class::<AnonymousPlus>()?;
        child_module.add_class::<AnonymousPlusEquals>()?;
        child_module.add_class::<AnonymousPrint>()?;
        child_module.add_class::<AnonymousRaise>()?;
        child_module.add_class::<AnonymousReturn>()?;
        child_module.add_class::<AnonymousSemicolon>()?;
        child_module.add_class::<AnonymousSlash>()?;
        child_module.add_class::<AnonymousSlashEquals>()?;
        child_module.add_class::<AnonymousSlashSlash>()?;
        child_module.add_class::<AnonymousSlashSlashEquals>()?;
        child_module.add_class::<AnonymousTilde>()?;
        child_module.add_class::<AnonymousTry>()?;
        child_module.add_class::<AnonymousType>()?;
        child_module.add_class::<AnonymousUnderscore>()?;
        child_module.add_class::<AnonymousWhile>()?;
        child_module.add_class::<AnonymousWith>()?;
        child_module.add_class::<AnonymousYield>()?;
        child_module.add_class::<ArgumentList>()?;
        child_module.add_class::<AsPattern>()?;
        child_module.add_class::<AsPatternTarget>()?;
        child_module.add_class::<AssertStatement>()?;
        child_module.add_class::<Assignment>()?;
        child_module.add_class::<Attribute>()?;
        child_module.add_class::<AugmentedAssignment>()?;
        child_module.add_class::<Await>()?;
        child_module.add_class::<BinaryOperator>()?;
        child_module.add_class::<Block>()?;
        child_module.add_class::<BooleanOperator>()?;
        child_module.add_class::<BreakStatement>()?;
        child_module.add_class::<Call>()?;
        child_module.add_class::<CaseClause>()?;
        child_module.add_class::<CasePattern>()?;
        child_module.add_class::<Chevron>()?;
        child_module.add_class::<ClassDefinition>()?;
        child_module.add_class::<ClassPattern>()?;
        child_module.add_class::<Comment>()?;
        child_module.add_class::<ComparisonOperator>()?;
        child_module.add_class::<ComplexPattern>()?;
        child_module.add_class::<ConcatenatedString>()?;
        child_module.add_class::<ConditionalExpression>()?;
        child_module.add_class::<ConstrainedType>()?;
        child_module.add_class::<ContinueStatement>()?;
        child_module.add_class::<DecoratedDefinition>()?;
        child_module.add_class::<Decorator>()?;
        child_module.add_class::<DefaultParameter>()?;
        child_module.add_class::<DeleteStatement>()?;
        child_module.add_class::<DictPattern>()?;
        child_module.add_class::<Dictionary>()?;
        child_module.add_class::<DictionaryComprehension>()?;
        child_module.add_class::<DictionarySplat>()?;
        child_module.add_class::<DictionarySplatPattern>()?;
        child_module.add_class::<DottedName>()?;
        child_module.add_class::<ElifClause>()?;
        child_module.add_class::<Ellipsis>()?;
        child_module.add_class::<ElseClause>()?;
        child_module.add_class::<EscapeInterpolation>()?;
        child_module.add_class::<EscapeSequence>()?;
        child_module.add_class::<ExceptClause>()?;
        child_module.add_class::<ExceptGroupClause>()?;
        child_module.add_class::<ExecStatement>()?;
        child_module.add_class::<ExpressionList>()?;
        child_module.add_class::<ExpressionStatement>()?;
        child_module.add_class::<False>()?;
        child_module.add_class::<FinallyClause>()?;
        child_module.add_class::<Float>()?;
        child_module.add_class::<ForInClause>()?;
        child_module.add_class::<ForStatement>()?;
        child_module.add_class::<FormatExpression>()?;
        child_module.add_class::<FormatSpecifier>()?;
        child_module.add_class::<FunctionDefinition>()?;
        child_module.add_class::<FutureImportStatement>()?;
        child_module.add_class::<GeneratorExpression>()?;
        child_module.add_class::<GenericType>()?;
        child_module.add_class::<GlobalStatement>()?;
        child_module.add_class::<Identifier>()?;
        child_module.add_class::<IfClause>()?;
        child_module.add_class::<IfStatement>()?;
        child_module.add_class::<ImportFromStatement>()?;
        child_module.add_class::<ImportPrefix>()?;
        child_module.add_class::<ImportStatement>()?;
        child_module.add_class::<Integer>()?;
        child_module.add_class::<Interpolation>()?;
        child_module.add_class::<KeywordArgument>()?;
        child_module.add_class::<KeywordPattern>()?;
        child_module.add_class::<KeywordSeparator>()?;
        child_module.add_class::<Lambda>()?;
        child_module.add_class::<LambdaParameters>()?;
        child_module.add_class::<LineContinuation>()?;
        child_module.add_class::<List>()?;
        child_module.add_class::<ListComprehension>()?;
        child_module.add_class::<ListPattern>()?;
        child_module.add_class::<ListSplat>()?;
        child_module.add_class::<ListSplatPattern>()?;
        child_module.add_class::<MatchStatement>()?;
        child_module.add_class::<MemberType>()?;
        child_module.add_class::<Module>()?;
        child_module.add_class::<NamedExpression>()?;
        child_module.add_class::<None>()?;
        child_module.add_class::<NonlocalStatement>()?;
        child_module.add_class::<NotOperator>()?;
        child_module.add_class::<Pair>()?;
        child_module.add_class::<Parameters>()?;
        child_module.add_class::<ParenthesizedExpression>()?;
        child_module.add_class::<ParenthesizedListSplat>()?;
        child_module.add_class::<PassStatement>()?;
        child_module.add_class::<PatternList>()?;
        child_module.add_class::<PositionalSeparator>()?;
        child_module.add_class::<PrintStatement>()?;
        child_module.add_class::<RaiseStatement>()?;
        child_module.add_class::<RelativeImport>()?;
        child_module.add_class::<ReturnStatement>()?;
        child_module.add_class::<Set>()?;
        child_module.add_class::<SetComprehension>()?;
        child_module.add_class::<Slice>()?;
        child_module.add_class::<SplatPattern>()?;
        child_module.add_class::<SplatType>()?;
        child_module.add_class::<String>()?;
        child_module.add_class::<StringContent>()?;
        child_module.add_class::<StringEnd>()?;
        child_module.add_class::<StringStart>()?;
        child_module.add_class::<Subscript>()?;
        child_module.add_class::<True>()?;
        child_module.add_class::<TryStatement>()?;
        child_module.add_class::<Tuple>()?;
        child_module.add_class::<TuplePattern>()?;
        child_module.add_class::<Type>()?;
        child_module.add_class::<TypeAliasStatement>()?;
        child_module.add_class::<TypeConversion>()?;
        child_module.add_class::<TypeParameter>()?;
        child_module.add_class::<TypedDefaultParameter>()?;
        child_module.add_class::<TypedParameter>()?;
        child_module.add_class::<UnaryOperator>()?;
        child_module.add_class::<UnionPattern>()?;
        child_module.add_class::<UnionType>()?;
        child_module.add_class::<WhileStatement>()?;
        child_module.add_class::<WildcardImport>()?;
        child_module.add_class::<WithClause>()?;
        child_module.add_class::<WithItem>()?;
        child_module.add_class::<WithStatement>()?;
        child_module.add_class::<Yield>()?;
        parent_module.add_submodule(&child_module)?;
        Ok(())
    }
}
#[derive(IntoPyObject)]
pub enum Symbol {
    Class(Class),
    Constant(Constant),
    Function(Function),
    Import(Import),
}
impl Symbol {
    pub fn new(
        py: Python<'_>,
        id: codegen_sdk_resolution::FullyQualifiedName,
        idx: usize,
        node: &codegen_sdk_analyzer::codegen_sdk_python::ast::Symbol<'_>,
        codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    ) -> Self {
        match node {
            codegen_sdk_analyzer::codegen_sdk_python::ast::Symbol::Class(_) => {
                Self::Class(Class::new(id, idx, codebase_arc))
            }
            codegen_sdk_analyzer::codegen_sdk_python::ast::Symbol::Constant(_) => {
                Self::Constant(Constant::new(id, idx, codebase_arc))
            }
            codegen_sdk_analyzer::codegen_sdk_python::ast::Symbol::Function(_) => {
                Self::Function(Function::new(id, idx, codebase_arc))
            }
            codegen_sdk_analyzer::codegen_sdk_python::ast::Symbol::Import(_) => {
                Self::Import(Import::new(id, idx, codebase_arc))
            }
        }
    }
}
#[derive(IntoPyObject)]
pub enum Reference {
    Call(Call),
}
impl Reference {
    pub fn new(
        py: Python<'_>,
        id: codegen_sdk_resolution::FullyQualifiedName,
        idx: usize,
        node: &codegen_sdk_analyzer::codegen_sdk_python::ast::Reference<'_>,
        codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    ) -> Self {
        match node {
            codegen_sdk_analyzer::codegen_sdk_python::ast::Reference::Call(_) => {
                Self::Call(Call::new(id, idx, codebase_arc))
            }
        }
    }
}
#[pyclass(module = "codegen_sdk_pink.python")]
pub struct Class {
    id: codegen_sdk_resolution::FullyQualifiedName,
    idx: usize,
    codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
}
impl Class {
    pub fn new(
        id: codegen_sdk_resolution::FullyQualifiedName,
        idx: usize,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    ) -> Self {
        Self { id, idx, codebase }
    }
    fn get<'db>(
        &'db self,
        py: Python<'db>,
    ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_python::ast::Class<'db>> {
        let codebase = self.codebase.get(py);
        let path = self.id.file(codebase.db());
        let file = codebase.get_file_for_id(path);
        let file = match file {
            Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
            _ => {
                return Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "File not found for path: {}", path.path(codebase.db())
                            .display()
                        ),
                    ),
                );
            }
        };
        let name = self.id.name(codebase.db());
        let node = file
            .definitions(codebase.db())
            .classes(codebase.db())
            .get(name)
            .unwrap();
        node.get(self.idx)
            .ok_or(pyo3::exceptions::PyValueError::new_err("Index out of bounds"))
    }
}
#[pymethods]
impl Class {
    pub fn ts_node(&self, py: Python<'_>) -> PyResult<cst::ClassDefinition> {
        let node = self.get(py)?;
        let db = self.codebase.get(py).db();
        Ok(cst::ClassDefinition::new(py, node.node_id(db), self.codebase.clone())?)
    }
    fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
        let db = self.codebase.get(py).db();
        let node = self.get(py)?.node(db);
        Ok(node.source())
    }
    fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
        Ok(self.source(py)?)
    }
    fn __repr__(&self, py: Python<'_>) -> PyResult<std::string::String> {
        let node = self.get(py)?;
        let codebase = self.codebase.get(py);
        codebase.attach(|_db| { Ok(format!("{node:#?}")) })
    }
    #[getter]
    pub fn name(&self, py: Python<'_>) -> PyResult<cst::Identifier> {
        let node = self.get(py)?;
        let db = self.codebase.get(py).db();
        Ok(
            cst::Identifier::new(
                py.clone(),
                node._name(db).clone(),
                self.codebase.clone(),
            )?,
        )
    }
}
#[pyclass(module = "codegen_sdk_pink.python")]
pub struct Constant {
    id: codegen_sdk_resolution::FullyQualifiedName,
    idx: usize,
    codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
}
impl Constant {
    pub fn new(
        id: codegen_sdk_resolution::FullyQualifiedName,
        idx: usize,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    ) -> Self {
        Self { id, idx, codebase }
    }
    fn get<'db>(
        &'db self,
        py: Python<'db>,
    ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_python::ast::Constant<'db>> {
        let codebase = self.codebase.get(py);
        let path = self.id.file(codebase.db());
        let file = codebase.get_file_for_id(path);
        let file = match file {
            Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
            _ => {
                return Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "File not found for path: {}", path.path(codebase.db())
                            .display()
                        ),
                    ),
                );
            }
        };
        let name = self.id.name(codebase.db());
        let node = file
            .definitions(codebase.db())
            .constants(codebase.db())
            .get(name)
            .unwrap();
        node.get(self.idx)
            .ok_or(pyo3::exceptions::PyValueError::new_err("Index out of bounds"))
    }
}
#[pymethods]
impl Constant {
    pub fn ts_node(&self, py: Python<'_>) -> PyResult<cst::Module> {
        let node = self.get(py)?;
        let db = self.codebase.get(py).db();
        Ok(cst::Module::new(py, node.node_id(db), self.codebase.clone())?)
    }
    fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
        let db = self.codebase.get(py).db();
        let node = self.get(py)?.node(db);
        Ok(node.source())
    }
    fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
        Ok(self.source(py)?)
    }
    fn __repr__(&self, py: Python<'_>) -> PyResult<std::string::String> {
        let node = self.get(py)?;
        let codebase = self.codebase.get(py);
        codebase.attach(|_db| { Ok(format!("{node:#?}")) })
    }
    #[getter]
    pub fn name(&self, py: Python<'_>) -> PyResult<cst::Identifier> {
        let node = self.get(py)?;
        let db = self.codebase.get(py).db();
        Ok(
            cst::Identifier::new(
                py.clone(),
                node._name(db).clone(),
                self.codebase.clone(),
            )?,
        )
    }
}
#[pyclass(module = "codegen_sdk_pink.python")]
pub struct Function {
    id: codegen_sdk_resolution::FullyQualifiedName,
    idx: usize,
    codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
}
impl Function {
    pub fn new(
        id: codegen_sdk_resolution::FullyQualifiedName,
        idx: usize,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    ) -> Self {
        Self { id, idx, codebase }
    }
    fn get<'db>(
        &'db self,
        py: Python<'db>,
    ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_python::ast::Function<'db>> {
        let codebase = self.codebase.get(py);
        let path = self.id.file(codebase.db());
        let file = codebase.get_file_for_id(path);
        let file = match file {
            Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
            _ => {
                return Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "File not found for path: {}", path.path(codebase.db())
                            .display()
                        ),
                    ),
                );
            }
        };
        let name = self.id.name(codebase.db());
        let node = file
            .definitions(codebase.db())
            .functions(codebase.db())
            .get(name)
            .unwrap();
        node.get(self.idx)
            .ok_or(pyo3::exceptions::PyValueError::new_err("Index out of bounds"))
    }
}
#[pymethods]
impl Function {
    pub fn ts_node(&self, py: Python<'_>) -> PyResult<cst::FunctionDefinition> {
        let node = self.get(py)?;
        let db = self.codebase.get(py).db();
        Ok(cst::FunctionDefinition::new(py, node.node_id(db), self.codebase.clone())?)
    }
    fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
        let db = self.codebase.get(py).db();
        let node = self.get(py)?.node(db);
        Ok(node.source())
    }
    fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
        Ok(self.source(py)?)
    }
    fn __repr__(&self, py: Python<'_>) -> PyResult<std::string::String> {
        let node = self.get(py)?;
        let codebase = self.codebase.get(py);
        codebase.attach(|_db| { Ok(format!("{node:#?}")) })
    }
    #[getter]
    pub fn name(&self, py: Python<'_>) -> PyResult<cst::Identifier> {
        let node = self.get(py)?;
        let db = self.codebase.get(py).db();
        Ok(
            cst::Identifier::new(
                py.clone(),
                node._name(db).clone(),
                self.codebase.clone(),
            )?,
        )
    }
}
#[pyclass(module = "codegen_sdk_pink.python")]
pub struct Import {
    id: codegen_sdk_resolution::FullyQualifiedName,
    idx: usize,
    codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
}
impl Import {
    pub fn new(
        id: codegen_sdk_resolution::FullyQualifiedName,
        idx: usize,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    ) -> Self {
        Self { id, idx, codebase }
    }
    fn get<'db>(
        &'db self,
        py: Python<'db>,
    ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_python::ast::Import<'db>> {
        let codebase = self.codebase.get(py);
        let path = self.id.file(codebase.db());
        let file = codebase.get_file_for_id(path);
        let file = match file {
            Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
            _ => {
                return Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "File not found for path: {}", path.path(codebase.db())
                            .display()
                        ),
                    ),
                );
            }
        };
        let name = self.id.name(codebase.db());
        let node = file
            .definitions(codebase.db())
            .imports(codebase.db())
            .get(name)
            .unwrap();
        node.get(self.idx)
            .ok_or(pyo3::exceptions::PyValueError::new_err("Index out of bounds"))
    }
}
#[pymethods]
impl Import {
    pub fn ts_node(&self, py: Python<'_>) -> PyResult<cst::ImportFromStatement> {
        let node = self.get(py)?;
        let db = self.codebase.get(py).db();
        Ok(cst::ImportFromStatement::new(py, node.node_id(db), self.codebase.clone())?)
    }
    fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
        let db = self.codebase.get(py).db();
        let node = self.get(py)?.node(db);
        Ok(node.source())
    }
    fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
        Ok(self.source(py)?)
    }
    fn __repr__(&self, py: Python<'_>) -> PyResult<std::string::String> {
        let node = self.get(py)?;
        let codebase = self.codebase.get(py);
        codebase.attach(|_db| { Ok(format!("{node:#?}")) })
    }
    #[getter]
    pub fn module(&self, py: Python<'_>) -> PyResult<cst::DottedName> {
        let node = self.get(py)?;
        let db = self.codebase.get(py).db();
        Ok(
            cst::DottedName::new(
                py.clone(),
                node._module(db).clone(),
                self.codebase.clone(),
            )?,
        )
    }
    #[getter]
    pub fn name(&self, py: Python<'_>) -> PyResult<cst::DottedName> {
        let node = self.get(py)?;
        let db = self.codebase.get(py).db();
        Ok(
            cst::DottedName::new(
                py.clone(),
                node._name(db).clone(),
                self.codebase.clone(),
            )?,
        )
    }
}
#[pyclass(module = "codegen_sdk_pink.python")]
pub struct Call {
    id: codegen_sdk_resolution::FullyQualifiedName,
    idx: usize,
    codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
}
impl Call {
    pub fn new(
        id: codegen_sdk_resolution::FullyQualifiedName,
        idx: usize,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    ) -> Self {
        Self { id, idx, codebase }
    }
    fn get<'db>(
        &'db self,
        py: Python<'db>,
    ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_python::ast::Call<'db>> {
        let codebase = self.codebase.get(py);
        let path = self.id.file(codebase.db());
        let file = codebase.get_file_for_id(path);
        let file = match file {
            Some(codegen_sdk_analyzer::ParsedFile::Python(py)) => py,
            _ => {
                return Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "File not found for path: {}", path.path(codebase.db())
                            .display()
                        ),
                    ),
                );
            }
        };
        let name = self.id.name(codebase.db());
        let node = file
            .references(codebase.db())
            .calls(codebase.db())
            .get(name)
            .unwrap();
        node.get(self.idx)
            .ok_or(pyo3::exceptions::PyValueError::new_err("Index out of bounds"))
    }
}
#[pymethods]
impl Call {
    pub fn ts_node(&self, py: Python<'_>) -> PyResult<cst::Call> {
        let node = self.get(py)?;
        let db = self.codebase.get(py).db();
        Ok(cst::Call::new(py, node.node_id(db), self.codebase.clone())?)
    }
    fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
        let db = self.codebase.get(py).db();
        let node = self.get(py)?.node(db);
        Ok(node.source())
    }
    fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
        Ok(self.source(py)?)
    }
    fn __repr__(&self, py: Python<'_>) -> PyResult<std::string::String> {
        let node = self.get(py)?;
        let codebase = self.codebase.get(py);
        codebase.attach(|_db| { Ok(format!("{node:#?}")) })
    }
    #[getter]
    pub fn name(&self, py: Python<'_>) -> PyResult<cst::Identifier> {
        let node = self.get(py)?;
        let db = self.codebase.get(py).db();
        Ok(
            cst::Identifier::new(
                py.clone(),
                node._name(db).clone(),
                self.codebase.clone(),
            )?,
        )
    }
}
pub fn register_python(
    py: Python<'_>,
    parent_module: &Bound<'_, PyModule>,
) -> PyResult<()> {
    let child_module = PyModule::new(parent_module.py(), "python")?;
    child_module.add_class::<PythonFile>()?;
    child_module.add_class::<Class>()?;
    child_module.add_class::<Constant>()?;
    child_module.add_class::<Function>()?;
    child_module.add_class::<Import>()?;
    child_module.add_class::<Call>()?;
    parent_module.add_submodule(&child_module)?;
    cst::register_cst(&child_module)?;
    py.import("sys")?
        .getattr("modules")?
        .set_item("codegen_sdk_pink.python", child_module)?;
    Ok(())
}
