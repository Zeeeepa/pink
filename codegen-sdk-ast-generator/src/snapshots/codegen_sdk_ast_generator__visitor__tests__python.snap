---
source: codegen-sdk-ast-generator/src/visitor.rs
expression: "codegen_sdk_common::generator::format_code_string(&visitor.to_string()).unwrap()"
---
#[salsa::tracked]
pub struct Definitions<'db> {
    #[return_ref]
    pub _classes: BTreeMap<String, Vec<indextree::NodeId>>,
    #[return_ref]
    pub _constants: BTreeMap<String, Vec<indextree::NodeId>>,
    #[return_ref]
    pub _functions: BTreeMap<String, Vec<indextree::NodeId>>,
}
impl<'db> Definitions<'db> {
    pub fn visit(
        db: &'db dyn salsa::Database,
        root: &'db crate::cst::Parsed<'db>,
    ) -> Self {
        let mut classes: BTreeMap<String, Vec<indextree::NodeId>> = BTreeMap::new();
        let mut constants: BTreeMap<String, Vec<indextree::NodeId>> = BTreeMap::new();
        let mut functions: BTreeMap<String, Vec<indextree::NodeId>> = BTreeMap::new();
        let tree = root.tree(db);
        for (node, id) in tree.descendants(&root.program(db)) {
            match node {
                crate::cst::NodeTypes::ClassDefinition(node) => {
                    ///Code for query: (class_definition   name: (identifier) @name) @definition.class
                    let name = node.name(tree);
                    classes.entry(name.source()).or_default().push(id);
                }
                crate::cst::NodeTypes::FunctionDefinition(node) => {
                    ///Code for query: (function_definition   name: (identifier) @name) @definition.function
                    let name = node.name(tree);
                    functions.entry(name.source()).or_default().push(id);
                }
                crate::cst::NodeTypes::Module(node) => {
                    ///Code for query: (module (expression_statement (assignment left: (identifier) @name) @definition.constant))
                    for child in node.children(tree) {
                        if let crate::cst::ModuleChildrenRef::ExpressionStatement(
                            child,
                        ) = child {
                            ///Code for query: (module (expression_statement (assignment left: (identifier) @name) @definition.constant))
                            for child in child.children(tree) {
                                if let crate::cst::ExpressionStatementChildrenRef::Assignment(
                                    child,
                                ) = child {
                                    ///Code for query: (module (expression_statement (assignment left: (identifier) @name) @definition.constant))
                                    let left = child.left(tree);
                                    constants.entry(left.source()).or_default().push(id);
                                }
                                break;
                            }
                        }
                        break;
                    }
                }
                _ => {}
            }
        }
        Self::new(db, classes, constants, functions)
    }
    pub fn default(db: &'db dyn salsa::Database) -> Self {
        let mut classes: BTreeMap<String, Vec<indextree::NodeId>> = BTreeMap::new();
        let mut constants: BTreeMap<String, Vec<indextree::NodeId>> = BTreeMap::new();
        let mut functions: BTreeMap<String, Vec<indextree::NodeId>> = BTreeMap::new();
        Self::new(db, classes, constants, functions)
    }
    pub fn classes(
        &self,
        db: &'db dyn salsa::Database,
        tree: &'db codegen_sdk_common::tree::Tree<crate::cst::NodeTypes<'db>>,
    ) -> BTreeMap<String, Vec<&'db crate::cst::ClassDefinition<'db>>> {
        self._classes(db)
            .iter()
            .map(|(k, v)| (
                k.clone(),
                v
                    .iter()
                    .map(|id| tree.get(id).unwrap().as_ref().try_into().unwrap())
                    .collect(),
            ))
            .collect()
    }
    pub fn constants(
        &self,
        db: &'db dyn salsa::Database,
        tree: &'db codegen_sdk_common::tree::Tree<crate::cst::NodeTypes<'db>>,
    ) -> BTreeMap<String, Vec<&'db crate::cst::Module<'db>>> {
        self._constants(db)
            .iter()
            .map(|(k, v)| (
                k.clone(),
                v
                    .iter()
                    .map(|id| tree.get(id).unwrap().as_ref().try_into().unwrap())
                    .collect(),
            ))
            .collect()
    }
    pub fn functions(
        &self,
        db: &'db dyn salsa::Database,
        tree: &'db codegen_sdk_common::tree::Tree<crate::cst::NodeTypes<'db>>,
    ) -> BTreeMap<String, Vec<&'db crate::cst::FunctionDefinition<'db>>> {
        self._functions(db)
            .iter()
            .map(|(k, v)| (
                k.clone(),
                v
                    .iter()
                    .map(|id| tree.get(id).unwrap().as_ref().try_into().unwrap())
                    .collect(),
            ))
            .collect()
    }
}
