---
source: codegen-sdk-ast-generator/src/visitor.rs
expression: "codegen_sdk_common::generator::format_code_string(&visitor.to_string()).unwrap()"
---
#[derive(Visitor, Visit, Debug, Clone, Eq, PartialEq, salsa::Update, Hash, Default)]
#[visit(drive(&crate::cst::AliasedImport<'db>))]
#[visit(drive(&crate::cst::AliasedImportChildren<'db>))]
#[visit(drive(&crate::cst::AnonymousAmpersand<'db>))]
#[visit(drive(&crate::cst::AnonymousAmpersandEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousAnd<'db>))]
#[visit(drive(&crate::cst::AnonymousAs<'db>))]
#[visit(drive(&crate::cst::AnonymousAssert<'db>))]
#[visit(drive(&crate::cst::AnonymousAsterisk<'db>))]
#[visit(drive(&crate::cst::AnonymousAsteriskAsterisk<'db>))]
#[visit(drive(&crate::cst::AnonymousAsteriskAsteriskEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousAsteriskEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousAsync<'db>))]
#[visit(drive(&crate::cst::AnonymousAt<'db>))]
#[visit(drive(&crate::cst::AnonymousAtEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousAwait<'db>))]
#[visit(drive(&crate::cst::AnonymousBackslash<'db>))]
#[visit(drive(&crate::cst::AnonymousBangEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousBreak<'db>))]
#[visit(drive(&crate::cst::AnonymousCaret<'db>))]
#[visit(drive(&crate::cst::AnonymousCaretEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousCase<'db>))]
#[visit(drive(&crate::cst::AnonymousClass<'db>))]
#[visit(drive(&crate::cst::AnonymousCloseBrace<'db>))]
#[visit(drive(&crate::cst::AnonymousCloseBracket<'db>))]
#[visit(drive(&crate::cst::AnonymousCloseParen<'db>))]
#[visit(drive(&crate::cst::AnonymousColon<'db>))]
#[visit(drive(&crate::cst::AnonymousColonEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousComma<'db>))]
#[visit(drive(&crate::cst::AnonymousContinue<'db>))]
#[visit(drive(&crate::cst::AnonymousDef<'db>))]
#[visit(drive(&crate::cst::AnonymousDel<'db>))]
#[visit(drive(&crate::cst::AnonymousDot<'db>))]
#[visit(drive(&crate::cst::AnonymousElif<'db>))]
#[visit(drive(&crate::cst::AnonymousElse<'db>))]
#[visit(drive(&crate::cst::AnonymousEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousEqualsEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousExcept<'db>))]
#[visit(drive(&crate::cst::AnonymousExceptAsterisk<'db>))]
#[visit(drive(&crate::cst::AnonymousExec<'db>))]
#[visit(drive(&crate::cst::AnonymousFinally<'db>))]
#[visit(drive(&crate::cst::AnonymousFor<'db>))]
#[visit(drive(&crate::cst::AnonymousFrom<'db>))]
#[visit(drive(&crate::cst::AnonymousFuture<'db>))]
#[visit(drive(&crate::cst::AnonymousGlobal<'db>))]
#[visit(drive(&crate::cst::AnonymousGreaterThan<'db>))]
#[visit(drive(&crate::cst::AnonymousGreaterThanEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousGreaterThanGreaterThan<'db>))]
#[visit(drive(&crate::cst::AnonymousGreaterThanGreaterThanEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousIf<'db>))]
#[visit(drive(&crate::cst::AnonymousImport<'db>))]
#[visit(drive(&crate::cst::AnonymousIn<'db>))]
#[visit(drive(&crate::cst::AnonymousIs<'db>))]
#[visit(drive(&crate::cst::AnonymousIsNot<'db>))]
#[visit(drive(&crate::cst::AnonymousLambda<'db>))]
#[visit(drive(&crate::cst::AnonymousLessThan<'db>))]
#[visit(drive(&crate::cst::AnonymousLessThanEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousLessThanGreaterThan<'db>))]
#[visit(drive(&crate::cst::AnonymousLessThanLessThan<'db>))]
#[visit(drive(&crate::cst::AnonymousLessThanLessThanEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousMatch<'db>))]
#[visit(drive(&crate::cst::AnonymousMinus<'db>))]
#[visit(drive(&crate::cst::AnonymousMinusEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousMinusGreaterThan<'db>))]
#[visit(drive(&crate::cst::AnonymousNonlocal<'db>))]
#[visit(drive(&crate::cst::AnonymousNot<'db>))]
#[visit(drive(&crate::cst::AnonymousNotIn<'db>))]
#[visit(drive(&crate::cst::AnonymousOpenBrace<'db>))]
#[visit(drive(&crate::cst::AnonymousOpenBracket<'db>))]
#[visit(drive(&crate::cst::AnonymousOpenParen<'db>))]
#[visit(drive(&crate::cst::AnonymousOr<'db>))]
#[visit(drive(&crate::cst::AnonymousPass<'db>))]
#[visit(drive(&crate::cst::AnonymousPercent<'db>))]
#[visit(drive(&crate::cst::AnonymousPercentEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousPipe<'db>))]
#[visit(drive(&crate::cst::AnonymousPipeEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousPlus<'db>))]
#[visit(drive(&crate::cst::AnonymousPlusEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousPrint<'db>))]
#[visit(drive(&crate::cst::AnonymousRaise<'db>))]
#[visit(drive(&crate::cst::AnonymousReturn<'db>))]
#[visit(drive(&crate::cst::AnonymousSemicolon<'db>))]
#[visit(drive(&crate::cst::AnonymousSlash<'db>))]
#[visit(drive(&crate::cst::AnonymousSlashEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousSlashSlash<'db>))]
#[visit(drive(&crate::cst::AnonymousSlashSlashEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousTilde<'db>))]
#[visit(drive(&crate::cst::AnonymousTry<'db>))]
#[visit(drive(&crate::cst::AnonymousType<'db>))]
#[visit(drive(&crate::cst::AnonymousUnderscore<'db>))]
#[visit(drive(&crate::cst::AnonymousWhile<'db>))]
#[visit(drive(&crate::cst::AnonymousWith<'db>))]
#[visit(drive(&crate::cst::AnonymousYield<'db>))]
#[visit(drive(&crate::cst::ArgumentList<'db>))]
#[visit(drive(&crate::cst::ArgumentListChildren<'db>))]
#[visit(drive(&crate::cst::AsPattern<'db>))]
#[visit(drive(&crate::cst::AsPatternChildren<'db>))]
#[visit(drive(&crate::cst::AsPatternTarget<'db>))]
#[visit(drive(&crate::cst::AssertStatement<'db>))]
#[visit(drive(&crate::cst::AssertStatementChildren<'db>))]
#[visit(drive(&crate::cst::Assignment<'db>))]
#[visit(drive(&crate::cst::AssignmentChildren<'db>))]
#[visit(drive(&crate::cst::AssignmentLeft<'db>))]
#[visit(drive(&crate::cst::AssignmentRight<'db>))]
#[visit(drive(&crate::cst::Attribute<'db>))]
#[visit(drive(&crate::cst::AttributeChildren<'db>))]
#[visit(drive(&crate::cst::AugmentedAssignment<'db>))]
#[visit(drive(&crate::cst::AugmentedAssignmentChildren<'db>))]
#[visit(drive(&crate::cst::AugmentedAssignmentLeft<'db>))]
#[visit(drive(&crate::cst::AugmentedAssignmentOperator<'db>))]
#[visit(drive(&crate::cst::AugmentedAssignmentRight<'db>))]
#[visit(drive(&crate::cst::Await<'db>))]
#[visit(drive(&crate::cst::AwaitChildren<'db>))]
#[visit(drive(&crate::cst::BinaryOperator<'db>))]
#[visit(drive(&crate::cst::BinaryOperatorChildren<'db>))]
#[visit(drive(&crate::cst::BinaryOperatorOperator<'db>))]
#[visit(drive(&crate::cst::Block<'db>))]
#[visit(drive(&crate::cst::BlockChildren<'db>))]
#[visit(drive(&crate::cst::BooleanOperator<'db>))]
#[visit(drive(&crate::cst::BooleanOperatorChildren<'db>))]
#[visit(drive(&crate::cst::BooleanOperatorOperator<'db>))]
#[visit(drive(&crate::cst::BreakStatement<'db>))]
#[visit(drive(&crate::cst::Call<'db>))]
#[visit(drive(&crate::cst::CallArguments<'db>))]
#[visit(drive(&crate::cst::CallChildren<'db>))]
#[visit(drive(&crate::cst::CaseClause<'db>))]
#[visit(drive(&crate::cst::CaseClauseChildren<'db>))]
#[visit(drive(&crate::cst::CasePattern<'db>))]
#[visit(drive(&crate::cst::CasePatternChildren<'db>))]
#[visit(drive(&crate::cst::Chevron<'db>))]
#[visit(drive(&crate::cst::ChevronChildren<'db>))]
#[visit(drive(&crate::cst::ClassDefinitionChildren<'db>))]
#[visit(drive(&crate::cst::ClassPattern<'db>))]
#[visit(drive(&crate::cst::ClassPatternChildren<'db>))]
#[visit(drive(&crate::cst::Comment<'db>))]
#[visit(drive(&crate::cst::ComparisonOperator<'db>))]
#[visit(drive(&crate::cst::ComparisonOperatorChildren<'db>))]
#[visit(drive(&crate::cst::ComparisonOperatorOperators<'db>))]
#[visit(drive(&crate::cst::ComplexPattern<'db>))]
#[visit(drive(&crate::cst::ComplexPatternChildren<'db>))]
#[visit(drive(&crate::cst::CompoundStatement<'db>))]
#[visit(drive(&crate::cst::ConcatenatedString<'db>))]
#[visit(drive(&crate::cst::ConcatenatedStringChildren<'db>))]
#[visit(drive(&crate::cst::ConditionalExpression<'db>))]
#[visit(drive(&crate::cst::ConditionalExpressionChildren<'db>))]
#[visit(drive(&crate::cst::ConstrainedType<'db>))]
#[visit(drive(&crate::cst::ConstrainedTypeChildren<'db>))]
#[visit(drive(&crate::cst::ContinueStatement<'db>))]
#[visit(drive(&crate::cst::DecoratedDefinition<'db>))]
#[visit(drive(&crate::cst::DecoratedDefinitionChildren<'db>))]
#[visit(drive(&crate::cst::DecoratedDefinitionDefinition<'db>))]
#[visit(drive(&crate::cst::Decorator<'db>))]
#[visit(drive(&crate::cst::DecoratorChildren<'db>))]
#[visit(drive(&crate::cst::DefaultParameter<'db>))]
#[visit(drive(&crate::cst::DefaultParameterChildren<'db>))]
#[visit(drive(&crate::cst::DefaultParameterName<'db>))]
#[visit(drive(&crate::cst::DeleteStatement<'db>))]
#[visit(drive(&crate::cst::DeleteStatementChildren<'db>))]
#[visit(drive(&crate::cst::DictPattern<'db>))]
#[visit(drive(&crate::cst::DictPatternChildren<'db>))]
#[visit(drive(&crate::cst::DictPatternKey<'db>))]
#[visit(drive(&crate::cst::Dictionary<'db>))]
#[visit(drive(&crate::cst::DictionaryChildren<'db>))]
#[visit(drive(&crate::cst::DictionaryComprehension<'db>))]
#[visit(drive(&crate::cst::DictionaryComprehensionChildren<'db>))]
#[visit(drive(&crate::cst::DictionarySplat<'db>))]
#[visit(drive(&crate::cst::DictionarySplatChildren<'db>))]
#[visit(drive(&crate::cst::DictionarySplatPattern<'db>))]
#[visit(drive(&crate::cst::DictionarySplatPatternChildren<'db>))]
#[visit(drive(&crate::cst::DottedName<'db>))]
#[visit(drive(&crate::cst::DottedNameChildren<'db>))]
#[visit(drive(&crate::cst::ElifClause<'db>))]
#[visit(drive(&crate::cst::ElifClauseChildren<'db>))]
#[visit(drive(&crate::cst::Ellipsis<'db>))]
#[visit(drive(&crate::cst::ElseClause<'db>))]
#[visit(drive(&crate::cst::ElseClauseChildren<'db>))]
#[visit(drive(&crate::cst::EscapeInterpolation<'db>))]
#[visit(drive(&crate::cst::EscapeSequence<'db>))]
#[visit(drive(&crate::cst::ExceptClause<'db>))]
#[visit(drive(&crate::cst::ExceptClauseChildren<'db>))]
#[visit(drive(&crate::cst::ExceptGroupClause<'db>))]
#[visit(drive(&crate::cst::ExceptGroupClauseChildren<'db>))]
#[visit(drive(&crate::cst::ExecStatement<'db>))]
#[visit(drive(&crate::cst::ExecStatementChildren<'db>))]
#[visit(drive(&crate::cst::ExecStatementCode<'db>))]
#[visit(drive(&crate::cst::Expression<'db>))]
#[visit(drive(&crate::cst::ExpressionList<'db>))]
#[visit(drive(&crate::cst::ExpressionListChildren<'db>))]
#[visit(drive(&crate::cst::ExpressionStatement<'db>))]
#[visit(drive(&crate::cst::ExpressionStatementChildren<'db>))]
#[visit(drive(&crate::cst::False<'db>))]
#[visit(drive(&crate::cst::FinallyClause<'db>))]
#[visit(drive(&crate::cst::FinallyClauseChildren<'db>))]
#[visit(drive(&crate::cst::Float<'db>))]
#[visit(drive(&crate::cst::ForInClause<'db>))]
#[visit(drive(&crate::cst::ForInClauseChildren<'db>))]
#[visit(drive(&crate::cst::ForInClauseLeft<'db>))]
#[visit(drive(&crate::cst::ForInClauseRight<'db>))]
#[visit(drive(&crate::cst::ForStatement<'db>))]
#[visit(drive(&crate::cst::ForStatementChildren<'db>))]
#[visit(drive(&crate::cst::ForStatementLeft<'db>))]
#[visit(drive(&crate::cst::ForStatementRight<'db>))]
#[visit(drive(&crate::cst::FormatExpression<'db>))]
#[visit(drive(&crate::cst::FormatExpressionChildren<'db>))]
#[visit(drive(&crate::cst::FormatExpressionExpression<'db>))]
#[visit(drive(&crate::cst::FormatSpecifier<'db>))]
#[visit(drive(&crate::cst::FormatSpecifierChildren<'db>))]
#[visit(drive(&crate::cst::FunctionDefinitionChildren<'db>))]
#[visit(drive(&crate::cst::FutureImportStatement<'db>))]
#[visit(drive(&crate::cst::FutureImportStatementChildren<'db>))]
#[visit(drive(&crate::cst::FutureImportStatementName<'db>))]
#[visit(drive(&crate::cst::GeneratorExpression<'db>))]
#[visit(drive(&crate::cst::GeneratorExpressionChildren<'db>))]
#[visit(drive(&crate::cst::GenericType<'db>))]
#[visit(drive(&crate::cst::GenericTypeChildren<'db>))]
#[visit(drive(&crate::cst::GlobalStatement<'db>))]
#[visit(drive(&crate::cst::GlobalStatementChildren<'db>))]
#[visit(drive(&crate::cst::Identifier<'db>))]
#[visit(drive(&crate::cst::IfClause<'db>))]
#[visit(drive(&crate::cst::IfClauseChildren<'db>))]
#[visit(drive(&crate::cst::IfStatement<'db>))]
#[visit(drive(&crate::cst::IfStatementAlternative<'db>))]
#[visit(drive(&crate::cst::IfStatementChildren<'db>))]
#[visit(drive(&crate::cst::ImportFromStatement<'db>))]
#[visit(drive(&crate::cst::ImportFromStatementChildren<'db>))]
#[visit(drive(&crate::cst::ImportFromStatementModuleName<'db>))]
#[visit(drive(&crate::cst::ImportFromStatementName<'db>))]
#[visit(drive(&crate::cst::ImportPrefix<'db>))]
#[visit(drive(&crate::cst::ImportStatement<'db>))]
#[visit(drive(&crate::cst::ImportStatementChildren<'db>))]
#[visit(drive(&crate::cst::ImportStatementName<'db>))]
#[visit(drive(&crate::cst::Integer<'db>))]
#[visit(drive(&crate::cst::Interpolation<'db>))]
#[visit(drive(&crate::cst::InterpolationChildren<'db>))]
#[visit(drive(&crate::cst::InterpolationExpression<'db>))]
#[visit(drive(&crate::cst::KeywordArgument<'db>))]
#[visit(drive(&crate::cst::KeywordArgumentChildren<'db>))]
#[visit(drive(&crate::cst::KeywordPattern<'db>))]
#[visit(drive(&crate::cst::KeywordPatternChildren<'db>))]
#[visit(drive(&crate::cst::KeywordSeparator<'db>))]
#[visit(drive(&crate::cst::Lambda<'db>))]
#[visit(drive(&crate::cst::LambdaChildren<'db>))]
#[visit(drive(&crate::cst::LambdaParameters<'db>))]
#[visit(drive(&crate::cst::LambdaParametersChildren<'db>))]
#[visit(drive(&crate::cst::LineContinuation<'db>))]
#[visit(drive(&crate::cst::List<'db>))]
#[visit(drive(&crate::cst::ListChildren<'db>))]
#[visit(drive(&crate::cst::ListComprehension<'db>))]
#[visit(drive(&crate::cst::ListComprehensionChildren<'db>))]
#[visit(drive(&crate::cst::ListPattern<'db>))]
#[visit(drive(&crate::cst::ListPatternChildren<'db>))]
#[visit(drive(&crate::cst::ListSplat<'db>))]
#[visit(drive(&crate::cst::ListSplatChildren<'db>))]
#[visit(drive(&crate::cst::ListSplatPattern<'db>))]
#[visit(drive(&crate::cst::ListSplatPatternChildren<'db>))]
#[visit(drive(&crate::cst::MatchStatement<'db>))]
#[visit(drive(&crate::cst::MatchStatementChildren<'db>))]
#[visit(drive(&crate::cst::MemberType<'db>))]
#[visit(drive(&crate::cst::MemberTypeChildren<'db>))]
#[visit(drive(&crate::cst::ModuleChildren<'db>))]
#[visit(drive(&crate::cst::NamedExpression<'db>))]
#[visit(drive(&crate::cst::NamedExpressionChildren<'db>))]
#[visit(drive(&crate::cst::None<'db>))]
#[visit(drive(&crate::cst::NonlocalStatement<'db>))]
#[visit(drive(&crate::cst::NonlocalStatementChildren<'db>))]
#[visit(drive(&crate::cst::NotOperator<'db>))]
#[visit(drive(&crate::cst::NotOperatorChildren<'db>))]
#[visit(drive(&crate::cst::Pair<'db>))]
#[visit(drive(&crate::cst::PairChildren<'db>))]
#[visit(drive(&crate::cst::Parameter<'db>))]
#[visit(drive(&crate::cst::Parameters<'db>))]
#[visit(drive(&crate::cst::ParametersChildren<'db>))]
#[visit(drive(&crate::cst::ParenthesizedExpression<'db>))]
#[visit(drive(&crate::cst::ParenthesizedExpressionChildren<'db>))]
#[visit(drive(&crate::cst::ParenthesizedListSplat<'db>))]
#[visit(drive(&crate::cst::ParenthesizedListSplatChildren<'db>))]
#[visit(drive(&crate::cst::PassStatement<'db>))]
#[visit(drive(&crate::cst::Pattern<'db>))]
#[visit(drive(&crate::cst::PatternList<'db>))]
#[visit(drive(&crate::cst::PatternListChildren<'db>))]
#[visit(drive(&crate::cst::PositionalSeparator<'db>))]
#[visit(drive(&crate::cst::PrimaryExpression<'db>))]
#[visit(drive(&crate::cst::PrintStatement<'db>))]
#[visit(drive(&crate::cst::PrintStatementChildren<'db>))]
#[visit(drive(&crate::cst::RaiseStatement<'db>))]
#[visit(drive(&crate::cst::RaiseStatementChildren<'db>))]
#[visit(drive(&crate::cst::RelativeImport<'db>))]
#[visit(drive(&crate::cst::RelativeImportChildren<'db>))]
#[visit(drive(&crate::cst::ReturnStatement<'db>))]
#[visit(drive(&crate::cst::ReturnStatementChildren<'db>))]
#[visit(drive(&crate::cst::Set<'db>))]
#[visit(drive(&crate::cst::SetChildren<'db>))]
#[visit(drive(&crate::cst::SetComprehension<'db>))]
#[visit(drive(&crate::cst::SetComprehensionChildren<'db>))]
#[visit(drive(&crate::cst::SimpleStatement<'db>))]
#[visit(drive(&crate::cst::Slice<'db>))]
#[visit(drive(&crate::cst::SliceChildren<'db>))]
#[visit(drive(&crate::cst::SplatPattern<'db>))]
#[visit(drive(&crate::cst::SplatPatternChildren<'db>))]
#[visit(drive(&crate::cst::SplatType<'db>))]
#[visit(drive(&crate::cst::SplatTypeChildren<'db>))]
#[visit(drive(&crate::cst::String<'db>))]
#[visit(drive(&crate::cst::StringChildren<'db>))]
#[visit(drive(&crate::cst::StringContent<'db>))]
#[visit(drive(&crate::cst::StringContentChildren<'db>))]
#[visit(drive(&crate::cst::StringEnd<'db>))]
#[visit(drive(&crate::cst::StringStart<'db>))]
#[visit(drive(&crate::cst::Subscript<'db>))]
#[visit(drive(&crate::cst::SubscriptChildren<'db>))]
#[visit(drive(&crate::cst::SubscriptSubscript<'db>))]
#[visit(drive(&crate::cst::True<'db>))]
#[visit(drive(&crate::cst::TryStatement<'db>))]
#[visit(drive(&crate::cst::TryStatementChildren<'db>))]
#[visit(drive(&crate::cst::Tuple<'db>))]
#[visit(drive(&crate::cst::TupleChildren<'db>))]
#[visit(drive(&crate::cst::TuplePattern<'db>))]
#[visit(drive(&crate::cst::TuplePatternChildren<'db>))]
#[visit(drive(&crate::cst::Type<'db>))]
#[visit(drive(&crate::cst::TypeAliasStatement<'db>))]
#[visit(drive(&crate::cst::TypeAliasStatementChildren<'db>))]
#[visit(drive(&crate::cst::TypeChildren<'db>))]
#[visit(drive(&crate::cst::TypeConversion<'db>))]
#[visit(drive(&crate::cst::TypeParameter<'db>))]
#[visit(drive(&crate::cst::TypeParameterChildren<'db>))]
#[visit(drive(&crate::cst::TypedDefaultParameter<'db>))]
#[visit(drive(&crate::cst::TypedDefaultParameterChildren<'db>))]
#[visit(drive(&crate::cst::TypedParameter<'db>))]
#[visit(drive(&crate::cst::TypedParameterChildren<'db>))]
#[visit(drive(&crate::cst::UnaryOperator<'db>))]
#[visit(drive(&crate::cst::UnaryOperatorChildren<'db>))]
#[visit(drive(&crate::cst::UnaryOperatorOperator<'db>))]
#[visit(drive(&crate::cst::UnionPattern<'db>))]
#[visit(drive(&crate::cst::UnionPatternChildren<'db>))]
#[visit(drive(&crate::cst::UnionType<'db>))]
#[visit(drive(&crate::cst::UnionTypeChildren<'db>))]
#[visit(drive(&crate::cst::WhileStatement<'db>))]
#[visit(drive(&crate::cst::WhileStatementChildren<'db>))]
#[visit(drive(&crate::cst::WildcardImport<'db>))]
#[visit(drive(&crate::cst::WithClause<'db>))]
#[visit(drive(&crate::cst::WithClauseChildren<'db>))]
#[visit(drive(&crate::cst::WithItem<'db>))]
#[visit(drive(&crate::cst::WithItemChildren<'db>))]
#[visit(drive(&crate::cst::WithStatement<'db>))]
#[visit(drive(&crate::cst::WithStatementChildren<'db>))]
#[visit(drive(&crate::cst::Yield<'db>))]
#[visit(drive(&crate::cst::YieldChildren<'db>))]
#[visit(drive(&crate::cst::ClassDefinition<'db>))]
#[visit(drive(&crate::cst::FunctionDefinition<'db>))]
#[visit(drive(&crate::cst::Module<'db>))]
#[visit(drive(crate::cst::AliasedImport<'db>))]
#[visit(drive(crate::cst::AliasedImportChildren<'db>))]
#[visit(drive(crate::cst::AnonymousAmpersand<'db>))]
#[visit(drive(crate::cst::AnonymousAmpersandEquals<'db>))]
#[visit(drive(crate::cst::AnonymousAnd<'db>))]
#[visit(drive(crate::cst::AnonymousAs<'db>))]
#[visit(drive(crate::cst::AnonymousAssert<'db>))]
#[visit(drive(crate::cst::AnonymousAsterisk<'db>))]
#[visit(drive(crate::cst::AnonymousAsteriskAsterisk<'db>))]
#[visit(drive(crate::cst::AnonymousAsteriskAsteriskEquals<'db>))]
#[visit(drive(crate::cst::AnonymousAsteriskEquals<'db>))]
#[visit(drive(crate::cst::AnonymousAsync<'db>))]
#[visit(drive(crate::cst::AnonymousAt<'db>))]
#[visit(drive(crate::cst::AnonymousAtEquals<'db>))]
#[visit(drive(crate::cst::AnonymousAwait<'db>))]
#[visit(drive(crate::cst::AnonymousBackslash<'db>))]
#[visit(drive(crate::cst::AnonymousBangEquals<'db>))]
#[visit(drive(crate::cst::AnonymousBreak<'db>))]
#[visit(drive(crate::cst::AnonymousCaret<'db>))]
#[visit(drive(crate::cst::AnonymousCaretEquals<'db>))]
#[visit(drive(crate::cst::AnonymousCase<'db>))]
#[visit(drive(crate::cst::AnonymousClass<'db>))]
#[visit(drive(crate::cst::AnonymousCloseBrace<'db>))]
#[visit(drive(crate::cst::AnonymousCloseBracket<'db>))]
#[visit(drive(crate::cst::AnonymousCloseParen<'db>))]
#[visit(drive(crate::cst::AnonymousColon<'db>))]
#[visit(drive(crate::cst::AnonymousColonEquals<'db>))]
#[visit(drive(crate::cst::AnonymousComma<'db>))]
#[visit(drive(crate::cst::AnonymousContinue<'db>))]
#[visit(drive(crate::cst::AnonymousDef<'db>))]
#[visit(drive(crate::cst::AnonymousDel<'db>))]
#[visit(drive(crate::cst::AnonymousDot<'db>))]
#[visit(drive(crate::cst::AnonymousElif<'db>))]
#[visit(drive(crate::cst::AnonymousElse<'db>))]
#[visit(drive(crate::cst::AnonymousEquals<'db>))]
#[visit(drive(crate::cst::AnonymousEqualsEquals<'db>))]
#[visit(drive(crate::cst::AnonymousExcept<'db>))]
#[visit(drive(crate::cst::AnonymousExceptAsterisk<'db>))]
#[visit(drive(crate::cst::AnonymousExec<'db>))]
#[visit(drive(crate::cst::AnonymousFinally<'db>))]
#[visit(drive(crate::cst::AnonymousFor<'db>))]
#[visit(drive(crate::cst::AnonymousFrom<'db>))]
#[visit(drive(crate::cst::AnonymousFuture<'db>))]
#[visit(drive(crate::cst::AnonymousGlobal<'db>))]
#[visit(drive(crate::cst::AnonymousGreaterThan<'db>))]
#[visit(drive(crate::cst::AnonymousGreaterThanEquals<'db>))]
#[visit(drive(crate::cst::AnonymousGreaterThanGreaterThan<'db>))]
#[visit(drive(crate::cst::AnonymousGreaterThanGreaterThanEquals<'db>))]
#[visit(drive(crate::cst::AnonymousIf<'db>))]
#[visit(drive(crate::cst::AnonymousImport<'db>))]
#[visit(drive(crate::cst::AnonymousIn<'db>))]
#[visit(drive(crate::cst::AnonymousIs<'db>))]
#[visit(drive(crate::cst::AnonymousIsNot<'db>))]
#[visit(drive(crate::cst::AnonymousLambda<'db>))]
#[visit(drive(crate::cst::AnonymousLessThan<'db>))]
#[visit(drive(crate::cst::AnonymousLessThanEquals<'db>))]
#[visit(drive(crate::cst::AnonymousLessThanGreaterThan<'db>))]
#[visit(drive(crate::cst::AnonymousLessThanLessThan<'db>))]
#[visit(drive(crate::cst::AnonymousLessThanLessThanEquals<'db>))]
#[visit(drive(crate::cst::AnonymousMatch<'db>))]
#[visit(drive(crate::cst::AnonymousMinus<'db>))]
#[visit(drive(crate::cst::AnonymousMinusEquals<'db>))]
#[visit(drive(crate::cst::AnonymousMinusGreaterThan<'db>))]
#[visit(drive(crate::cst::AnonymousNonlocal<'db>))]
#[visit(drive(crate::cst::AnonymousNot<'db>))]
#[visit(drive(crate::cst::AnonymousNotIn<'db>))]
#[visit(drive(crate::cst::AnonymousOpenBrace<'db>))]
#[visit(drive(crate::cst::AnonymousOpenBracket<'db>))]
#[visit(drive(crate::cst::AnonymousOpenParen<'db>))]
#[visit(drive(crate::cst::AnonymousOr<'db>))]
#[visit(drive(crate::cst::AnonymousPass<'db>))]
#[visit(drive(crate::cst::AnonymousPercent<'db>))]
#[visit(drive(crate::cst::AnonymousPercentEquals<'db>))]
#[visit(drive(crate::cst::AnonymousPipe<'db>))]
#[visit(drive(crate::cst::AnonymousPipeEquals<'db>))]
#[visit(drive(crate::cst::AnonymousPlus<'db>))]
#[visit(drive(crate::cst::AnonymousPlusEquals<'db>))]
#[visit(drive(crate::cst::AnonymousPrint<'db>))]
#[visit(drive(crate::cst::AnonymousRaise<'db>))]
#[visit(drive(crate::cst::AnonymousReturn<'db>))]
#[visit(drive(crate::cst::AnonymousSemicolon<'db>))]
#[visit(drive(crate::cst::AnonymousSlash<'db>))]
#[visit(drive(crate::cst::AnonymousSlashEquals<'db>))]
#[visit(drive(crate::cst::AnonymousSlashSlash<'db>))]
#[visit(drive(crate::cst::AnonymousSlashSlashEquals<'db>))]
#[visit(drive(crate::cst::AnonymousTilde<'db>))]
#[visit(drive(crate::cst::AnonymousTry<'db>))]
#[visit(drive(crate::cst::AnonymousType<'db>))]
#[visit(drive(crate::cst::AnonymousUnderscore<'db>))]
#[visit(drive(crate::cst::AnonymousWhile<'db>))]
#[visit(drive(crate::cst::AnonymousWith<'db>))]
#[visit(drive(crate::cst::AnonymousYield<'db>))]
#[visit(drive(crate::cst::ArgumentList<'db>))]
#[visit(drive(crate::cst::ArgumentListChildren<'db>))]
#[visit(drive(crate::cst::AsPattern<'db>))]
#[visit(drive(crate::cst::AsPatternChildren<'db>))]
#[visit(drive(crate::cst::AsPatternTarget<'db>))]
#[visit(drive(crate::cst::AssertStatement<'db>))]
#[visit(drive(crate::cst::AssertStatementChildren<'db>))]
#[visit(drive(crate::cst::Assignment<'db>))]
#[visit(drive(crate::cst::AssignmentChildren<'db>))]
#[visit(drive(crate::cst::AssignmentLeft<'db>))]
#[visit(drive(crate::cst::AssignmentRight<'db>))]
#[visit(drive(crate::cst::Attribute<'db>))]
#[visit(drive(crate::cst::AttributeChildren<'db>))]
#[visit(drive(crate::cst::AugmentedAssignment<'db>))]
#[visit(drive(crate::cst::AugmentedAssignmentChildren<'db>))]
#[visit(drive(crate::cst::AugmentedAssignmentLeft<'db>))]
#[visit(drive(crate::cst::AugmentedAssignmentOperator<'db>))]
#[visit(drive(crate::cst::AugmentedAssignmentRight<'db>))]
#[visit(drive(crate::cst::Await<'db>))]
#[visit(drive(crate::cst::AwaitChildren<'db>))]
#[visit(drive(crate::cst::BinaryOperator<'db>))]
#[visit(drive(crate::cst::BinaryOperatorChildren<'db>))]
#[visit(drive(crate::cst::BinaryOperatorOperator<'db>))]
#[visit(drive(crate::cst::Block<'db>))]
#[visit(drive(crate::cst::BlockChildren<'db>))]
#[visit(drive(crate::cst::BooleanOperator<'db>))]
#[visit(drive(crate::cst::BooleanOperatorChildren<'db>))]
#[visit(drive(crate::cst::BooleanOperatorOperator<'db>))]
#[visit(drive(crate::cst::BreakStatement<'db>))]
#[visit(drive(crate::cst::Call<'db>))]
#[visit(drive(crate::cst::CallArguments<'db>))]
#[visit(drive(crate::cst::CallChildren<'db>))]
#[visit(drive(crate::cst::CaseClause<'db>))]
#[visit(drive(crate::cst::CaseClauseChildren<'db>))]
#[visit(drive(crate::cst::CasePattern<'db>))]
#[visit(drive(crate::cst::CasePatternChildren<'db>))]
#[visit(drive(crate::cst::Chevron<'db>))]
#[visit(drive(crate::cst::ChevronChildren<'db>))]
#[visit(drive(crate::cst::ClassDefinitionChildren<'db>))]
#[visit(drive(crate::cst::ClassPattern<'db>))]
#[visit(drive(crate::cst::ClassPatternChildren<'db>))]
#[visit(drive(crate::cst::Comment<'db>))]
#[visit(drive(crate::cst::ComparisonOperator<'db>))]
#[visit(drive(crate::cst::ComparisonOperatorChildren<'db>))]
#[visit(drive(crate::cst::ComparisonOperatorOperators<'db>))]
#[visit(drive(crate::cst::ComplexPattern<'db>))]
#[visit(drive(crate::cst::ComplexPatternChildren<'db>))]
#[visit(drive(crate::cst::CompoundStatement<'db>))]
#[visit(drive(crate::cst::ConcatenatedString<'db>))]
#[visit(drive(crate::cst::ConcatenatedStringChildren<'db>))]
#[visit(drive(crate::cst::ConditionalExpression<'db>))]
#[visit(drive(crate::cst::ConditionalExpressionChildren<'db>))]
#[visit(drive(crate::cst::ConstrainedType<'db>))]
#[visit(drive(crate::cst::ConstrainedTypeChildren<'db>))]
#[visit(drive(crate::cst::ContinueStatement<'db>))]
#[visit(drive(crate::cst::DecoratedDefinition<'db>))]
#[visit(drive(crate::cst::DecoratedDefinitionChildren<'db>))]
#[visit(drive(crate::cst::DecoratedDefinitionDefinition<'db>))]
#[visit(drive(crate::cst::Decorator<'db>))]
#[visit(drive(crate::cst::DecoratorChildren<'db>))]
#[visit(drive(crate::cst::DefaultParameter<'db>))]
#[visit(drive(crate::cst::DefaultParameterChildren<'db>))]
#[visit(drive(crate::cst::DefaultParameterName<'db>))]
#[visit(drive(crate::cst::DeleteStatement<'db>))]
#[visit(drive(crate::cst::DeleteStatementChildren<'db>))]
#[visit(drive(crate::cst::DictPattern<'db>))]
#[visit(drive(crate::cst::DictPatternChildren<'db>))]
#[visit(drive(crate::cst::DictPatternKey<'db>))]
#[visit(drive(crate::cst::Dictionary<'db>))]
#[visit(drive(crate::cst::DictionaryChildren<'db>))]
#[visit(drive(crate::cst::DictionaryComprehension<'db>))]
#[visit(drive(crate::cst::DictionaryComprehensionChildren<'db>))]
#[visit(drive(crate::cst::DictionarySplat<'db>))]
#[visit(drive(crate::cst::DictionarySplatChildren<'db>))]
#[visit(drive(crate::cst::DictionarySplatPattern<'db>))]
#[visit(drive(crate::cst::DictionarySplatPatternChildren<'db>))]
#[visit(drive(crate::cst::DottedName<'db>))]
#[visit(drive(crate::cst::DottedNameChildren<'db>))]
#[visit(drive(crate::cst::ElifClause<'db>))]
#[visit(drive(crate::cst::ElifClauseChildren<'db>))]
#[visit(drive(crate::cst::Ellipsis<'db>))]
#[visit(drive(crate::cst::ElseClause<'db>))]
#[visit(drive(crate::cst::ElseClauseChildren<'db>))]
#[visit(drive(crate::cst::EscapeInterpolation<'db>))]
#[visit(drive(crate::cst::EscapeSequence<'db>))]
#[visit(drive(crate::cst::ExceptClause<'db>))]
#[visit(drive(crate::cst::ExceptClauseChildren<'db>))]
#[visit(drive(crate::cst::ExceptGroupClause<'db>))]
#[visit(drive(crate::cst::ExceptGroupClauseChildren<'db>))]
#[visit(drive(crate::cst::ExecStatement<'db>))]
#[visit(drive(crate::cst::ExecStatementChildren<'db>))]
#[visit(drive(crate::cst::ExecStatementCode<'db>))]
#[visit(drive(crate::cst::Expression<'db>))]
#[visit(drive(crate::cst::ExpressionList<'db>))]
#[visit(drive(crate::cst::ExpressionListChildren<'db>))]
#[visit(drive(crate::cst::ExpressionStatement<'db>))]
#[visit(drive(crate::cst::ExpressionStatementChildren<'db>))]
#[visit(drive(crate::cst::False<'db>))]
#[visit(drive(crate::cst::FinallyClause<'db>))]
#[visit(drive(crate::cst::FinallyClauseChildren<'db>))]
#[visit(drive(crate::cst::Float<'db>))]
#[visit(drive(crate::cst::ForInClause<'db>))]
#[visit(drive(crate::cst::ForInClauseChildren<'db>))]
#[visit(drive(crate::cst::ForInClauseLeft<'db>))]
#[visit(drive(crate::cst::ForInClauseRight<'db>))]
#[visit(drive(crate::cst::ForStatement<'db>))]
#[visit(drive(crate::cst::ForStatementChildren<'db>))]
#[visit(drive(crate::cst::ForStatementLeft<'db>))]
#[visit(drive(crate::cst::ForStatementRight<'db>))]
#[visit(drive(crate::cst::FormatExpression<'db>))]
#[visit(drive(crate::cst::FormatExpressionChildren<'db>))]
#[visit(drive(crate::cst::FormatExpressionExpression<'db>))]
#[visit(drive(crate::cst::FormatSpecifier<'db>))]
#[visit(drive(crate::cst::FormatSpecifierChildren<'db>))]
#[visit(drive(crate::cst::FunctionDefinitionChildren<'db>))]
#[visit(drive(crate::cst::FutureImportStatement<'db>))]
#[visit(drive(crate::cst::FutureImportStatementChildren<'db>))]
#[visit(drive(crate::cst::FutureImportStatementName<'db>))]
#[visit(drive(crate::cst::GeneratorExpression<'db>))]
#[visit(drive(crate::cst::GeneratorExpressionChildren<'db>))]
#[visit(drive(crate::cst::GenericType<'db>))]
#[visit(drive(crate::cst::GenericTypeChildren<'db>))]
#[visit(drive(crate::cst::GlobalStatement<'db>))]
#[visit(drive(crate::cst::GlobalStatementChildren<'db>))]
#[visit(drive(crate::cst::Identifier<'db>))]
#[visit(drive(crate::cst::IfClause<'db>))]
#[visit(drive(crate::cst::IfClauseChildren<'db>))]
#[visit(drive(crate::cst::IfStatement<'db>))]
#[visit(drive(crate::cst::IfStatementAlternative<'db>))]
#[visit(drive(crate::cst::IfStatementChildren<'db>))]
#[visit(drive(crate::cst::ImportFromStatement<'db>))]
#[visit(drive(crate::cst::ImportFromStatementChildren<'db>))]
#[visit(drive(crate::cst::ImportFromStatementModuleName<'db>))]
#[visit(drive(crate::cst::ImportFromStatementName<'db>))]
#[visit(drive(crate::cst::ImportPrefix<'db>))]
#[visit(drive(crate::cst::ImportStatement<'db>))]
#[visit(drive(crate::cst::ImportStatementChildren<'db>))]
#[visit(drive(crate::cst::ImportStatementName<'db>))]
#[visit(drive(crate::cst::Integer<'db>))]
#[visit(drive(crate::cst::Interpolation<'db>))]
#[visit(drive(crate::cst::InterpolationChildren<'db>))]
#[visit(drive(crate::cst::InterpolationExpression<'db>))]
#[visit(drive(crate::cst::KeywordArgument<'db>))]
#[visit(drive(crate::cst::KeywordArgumentChildren<'db>))]
#[visit(drive(crate::cst::KeywordPattern<'db>))]
#[visit(drive(crate::cst::KeywordPatternChildren<'db>))]
#[visit(drive(crate::cst::KeywordSeparator<'db>))]
#[visit(drive(crate::cst::Lambda<'db>))]
#[visit(drive(crate::cst::LambdaChildren<'db>))]
#[visit(drive(crate::cst::LambdaParameters<'db>))]
#[visit(drive(crate::cst::LambdaParametersChildren<'db>))]
#[visit(drive(crate::cst::LineContinuation<'db>))]
#[visit(drive(crate::cst::List<'db>))]
#[visit(drive(crate::cst::ListChildren<'db>))]
#[visit(drive(crate::cst::ListComprehension<'db>))]
#[visit(drive(crate::cst::ListComprehensionChildren<'db>))]
#[visit(drive(crate::cst::ListPattern<'db>))]
#[visit(drive(crate::cst::ListPatternChildren<'db>))]
#[visit(drive(crate::cst::ListSplat<'db>))]
#[visit(drive(crate::cst::ListSplatChildren<'db>))]
#[visit(drive(crate::cst::ListSplatPattern<'db>))]
#[visit(drive(crate::cst::ListSplatPatternChildren<'db>))]
#[visit(drive(crate::cst::MatchStatement<'db>))]
#[visit(drive(crate::cst::MatchStatementChildren<'db>))]
#[visit(drive(crate::cst::MemberType<'db>))]
#[visit(drive(crate::cst::MemberTypeChildren<'db>))]
#[visit(drive(crate::cst::ModuleChildren<'db>))]
#[visit(drive(crate::cst::NamedExpression<'db>))]
#[visit(drive(crate::cst::NamedExpressionChildren<'db>))]
#[visit(drive(crate::cst::None<'db>))]
#[visit(drive(crate::cst::NonlocalStatement<'db>))]
#[visit(drive(crate::cst::NonlocalStatementChildren<'db>))]
#[visit(drive(crate::cst::NotOperator<'db>))]
#[visit(drive(crate::cst::NotOperatorChildren<'db>))]
#[visit(drive(crate::cst::Pair<'db>))]
#[visit(drive(crate::cst::PairChildren<'db>))]
#[visit(drive(crate::cst::Parameter<'db>))]
#[visit(drive(crate::cst::Parameters<'db>))]
#[visit(drive(crate::cst::ParametersChildren<'db>))]
#[visit(drive(crate::cst::ParenthesizedExpression<'db>))]
#[visit(drive(crate::cst::ParenthesizedExpressionChildren<'db>))]
#[visit(drive(crate::cst::ParenthesizedListSplat<'db>))]
#[visit(drive(crate::cst::ParenthesizedListSplatChildren<'db>))]
#[visit(drive(crate::cst::PassStatement<'db>))]
#[visit(drive(crate::cst::Pattern<'db>))]
#[visit(drive(crate::cst::PatternList<'db>))]
#[visit(drive(crate::cst::PatternListChildren<'db>))]
#[visit(drive(crate::cst::PositionalSeparator<'db>))]
#[visit(drive(crate::cst::PrimaryExpression<'db>))]
#[visit(drive(crate::cst::PrintStatement<'db>))]
#[visit(drive(crate::cst::PrintStatementChildren<'db>))]
#[visit(drive(crate::cst::RaiseStatement<'db>))]
#[visit(drive(crate::cst::RaiseStatementChildren<'db>))]
#[visit(drive(crate::cst::RelativeImport<'db>))]
#[visit(drive(crate::cst::RelativeImportChildren<'db>))]
#[visit(drive(crate::cst::ReturnStatement<'db>))]
#[visit(drive(crate::cst::ReturnStatementChildren<'db>))]
#[visit(drive(crate::cst::Set<'db>))]
#[visit(drive(crate::cst::SetChildren<'db>))]
#[visit(drive(crate::cst::SetComprehension<'db>))]
#[visit(drive(crate::cst::SetComprehensionChildren<'db>))]
#[visit(drive(crate::cst::SimpleStatement<'db>))]
#[visit(drive(crate::cst::Slice<'db>))]
#[visit(drive(crate::cst::SliceChildren<'db>))]
#[visit(drive(crate::cst::SplatPattern<'db>))]
#[visit(drive(crate::cst::SplatPatternChildren<'db>))]
#[visit(drive(crate::cst::SplatType<'db>))]
#[visit(drive(crate::cst::SplatTypeChildren<'db>))]
#[visit(drive(crate::cst::String<'db>))]
#[visit(drive(crate::cst::StringChildren<'db>))]
#[visit(drive(crate::cst::StringContent<'db>))]
#[visit(drive(crate::cst::StringContentChildren<'db>))]
#[visit(drive(crate::cst::StringEnd<'db>))]
#[visit(drive(crate::cst::StringStart<'db>))]
#[visit(drive(crate::cst::Subscript<'db>))]
#[visit(drive(crate::cst::SubscriptChildren<'db>))]
#[visit(drive(crate::cst::SubscriptSubscript<'db>))]
#[visit(drive(crate::cst::True<'db>))]
#[visit(drive(crate::cst::TryStatement<'db>))]
#[visit(drive(crate::cst::TryStatementChildren<'db>))]
#[visit(drive(crate::cst::Tuple<'db>))]
#[visit(drive(crate::cst::TupleChildren<'db>))]
#[visit(drive(crate::cst::TuplePattern<'db>))]
#[visit(drive(crate::cst::TuplePatternChildren<'db>))]
#[visit(drive(crate::cst::Type<'db>))]
#[visit(drive(crate::cst::TypeAliasStatement<'db>))]
#[visit(drive(crate::cst::TypeAliasStatementChildren<'db>))]
#[visit(drive(crate::cst::TypeChildren<'db>))]
#[visit(drive(crate::cst::TypeConversion<'db>))]
#[visit(drive(crate::cst::TypeParameter<'db>))]
#[visit(drive(crate::cst::TypeParameterChildren<'db>))]
#[visit(drive(crate::cst::TypedDefaultParameter<'db>))]
#[visit(drive(crate::cst::TypedDefaultParameterChildren<'db>))]
#[visit(drive(crate::cst::TypedParameter<'db>))]
#[visit(drive(crate::cst::TypedParameterChildren<'db>))]
#[visit(drive(crate::cst::UnaryOperator<'db>))]
#[visit(drive(crate::cst::UnaryOperatorChildren<'db>))]
#[visit(drive(crate::cst::UnaryOperatorOperator<'db>))]
#[visit(drive(crate::cst::UnionPattern<'db>))]
#[visit(drive(crate::cst::UnionPatternChildren<'db>))]
#[visit(drive(crate::cst::UnionType<'db>))]
#[visit(drive(crate::cst::UnionTypeChildren<'db>))]
#[visit(drive(crate::cst::WhileStatement<'db>))]
#[visit(drive(crate::cst::WhileStatementChildren<'db>))]
#[visit(drive(crate::cst::WildcardImport<'db>))]
#[visit(drive(crate::cst::WithClause<'db>))]
#[visit(drive(crate::cst::WithClauseChildren<'db>))]
#[visit(drive(crate::cst::WithItem<'db>))]
#[visit(drive(crate::cst::WithItemChildren<'db>))]
#[visit(drive(crate::cst::WithStatement<'db>))]
#[visit(drive(crate::cst::WithStatementChildren<'db>))]
#[visit(drive(crate::cst::Yield<'db>))]
#[visit(drive(crate::cst::YieldChildren<'db>))]
#[visit(drive(for<T>Box<T>))]
#[visit(drive(for<T>Vec<T>))]
#[visit(drive(for<T>Option<T>))]
#[visit(
    enter(ClassDefinition:crate::cst::ClassDefinition<'db>),
    enter(FunctionDefinition:crate::cst::FunctionDefinition<'db>),
    enter(Module:crate::cst::Module<'db>)
)]
pub struct Definitions<'db> {
    pub classes: BTreeMap<String, Vec<crate::cst::ClassDefinition<'db>>>,
    pub constants: BTreeMap<String, Vec<crate::cst::Module<'db>>>,
    pub functions: BTreeMap<String, Vec<crate::cst::FunctionDefinition<'db>>>,
    phantom: std::marker::PhantomData<&'db ()>,
}
impl<'db> Definitions<'db> {
    fn enter_ClassDefinition(&mut self, node: &crate::cst::ClassDefinition<'db>) {
        ///Code for query: (class_definition   name: (identifier) @name) @definition.class
        let name = &*node.name;
        self.classes.entry(name.source()).or_insert(Vec::new()).push(node.clone());
    }
    fn enter_FunctionDefinition(&mut self, node: &crate::cst::FunctionDefinition<'db>) {
        ///Code for query: (function_definition   name: (identifier) @name) @definition.function
        let name = &*node.name;
        self.functions.entry(name.source()).or_insert(Vec::new()).push(node.clone());
    }
    fn enter_Module(&mut self, node: &crate::cst::Module<'db>) {
        ///Code for query: (module (expression_statement (assignment left: (identifier) @name) @definition.constant))
        for child in node.children().into_iter() {
            if let crate::cst::ModuleChildren::ExpressionStatement(child) = child {
                ///Code for query: (module (expression_statement (assignment left: (identifier) @name) @definition.constant))
                for child in child.children().into_iter() {
                    if let crate::cst::ExpressionStatementChildren::Assignment(child) = child {
                        ///Code for query: (module (expression_statement (assignment left: (identifier) @name) @definition.constant))
                        let left = &*child.left;
                        self.constants
                            .entry(left.source())
                            .or_insert(Vec::new())
                            .push(node.clone());
                    }
                    break;
                }
            }
            break;
        }
    }
}
