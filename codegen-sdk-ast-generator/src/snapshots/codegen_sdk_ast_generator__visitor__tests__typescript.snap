---
source: codegen-sdk-ast-generator/src/visitor.rs
expression: "codegen_sdk_common::generator::format_code_string(&visitor.to_string()).unwrap()"
---
#[salsa::tracked]
pub struct Definitions<'db> {
    #[return_ref]
    pub _classes: BTreeMap<String, Vec<indextree::NodeId>>,
    #[return_ref]
    pub _functions: BTreeMap<String, Vec<indextree::NodeId>>,
    #[return_ref]
    pub _interfaces: BTreeMap<String, Vec<indextree::NodeId>>,
    #[return_ref]
    pub _methods: BTreeMap<String, Vec<indextree::NodeId>>,
    #[return_ref]
    pub _modules: BTreeMap<String, Vec<indextree::NodeId>>,
}
impl<'db> Definitions<'db> {
    pub fn visit(
        db: &'db dyn salsa::Database,
        root: &'db crate::cst::Parsed<'db>,
    ) -> Self {
        let mut classes: BTreeMap<String, Vec<indextree::NodeId>> = BTreeMap::new();
        let mut functions: BTreeMap<String, Vec<indextree::NodeId>> = BTreeMap::new();
        let mut interfaces: BTreeMap<String, Vec<indextree::NodeId>> = BTreeMap::new();
        let mut methods: BTreeMap<String, Vec<indextree::NodeId>> = BTreeMap::new();
        let mut modules: BTreeMap<String, Vec<indextree::NodeId>> = BTreeMap::new();
        let tree = root.tree(db);
        for (node, id) in tree.descendants(&root.program(db)) {
            match node {
                crate::cst::NodeTypes::AbstractClassDeclaration(node) => {
                    ///Code for query: (abstract_class_declaration   name: (type_identifier) @name) @definition.class
                    let name = node.name(tree);
                    classes.entry(name.source()).or_default().push(id);
                }
                crate::cst::NodeTypes::AbstractMethodSignature(node) => {
                    ///Code for query: (abstract_method_signature   name: (property_identifier) @name) @definition.method
                    let name = node.name(tree);
                    methods.entry(name.source()).or_default().push(id);
                }
                crate::cst::NodeTypes::FunctionSignature(node) => {
                    ///Code for query: (function_signature   name: (identifier) @name) @definition.function
                    let name = node.name(tree);
                    functions.entry(name.source()).or_default().push(id);
                }
                crate::cst::NodeTypes::InterfaceDeclaration(node) => {
                    ///Code for query: (interface_declaration   name: (type_identifier) @name) @definition.interface
                    let name = node.name(tree);
                    interfaces.entry(name.source()).or_default().push(id);
                }
                crate::cst::NodeTypes::Module(node) => {
                    ///Code for query: (module   name: (identifier) @name) @definition.module
                    let name = node.name(tree);
                    modules.entry(name.source()).or_default().push(id);
                }
                _ => {}
            }
        }
        Self::new(db, classes, functions, interfaces, methods, modules)
    }
    pub fn default(db: &'db dyn salsa::Database) -> Self {
        let mut classes: BTreeMap<String, Vec<indextree::NodeId>> = BTreeMap::new();
        let mut functions: BTreeMap<String, Vec<indextree::NodeId>> = BTreeMap::new();
        let mut interfaces: BTreeMap<String, Vec<indextree::NodeId>> = BTreeMap::new();
        let mut methods: BTreeMap<String, Vec<indextree::NodeId>> = BTreeMap::new();
        let mut modules: BTreeMap<String, Vec<indextree::NodeId>> = BTreeMap::new();
        Self::new(db, classes, functions, interfaces, methods, modules)
    }
    pub fn classes(
        &self,
        db: &'db dyn salsa::Database,
        tree: &'db codegen_sdk_common::tree::Tree<crate::cst::NodeTypes<'db>>,
    ) -> BTreeMap<String, Vec<&'db crate::cst::AbstractClassDeclaration<'db>>> {
        self._classes(db)
            .iter()
            .map(|(k, v)| (
                k.clone(),
                v
                    .iter()
                    .map(|id| tree.get(id).unwrap().as_ref().try_into().unwrap())
                    .collect(),
            ))
            .collect()
    }
    pub fn functions(
        &self,
        db: &'db dyn salsa::Database,
        tree: &'db codegen_sdk_common::tree::Tree<crate::cst::NodeTypes<'db>>,
    ) -> BTreeMap<String, Vec<&'db crate::cst::FunctionSignature<'db>>> {
        self._functions(db)
            .iter()
            .map(|(k, v)| (
                k.clone(),
                v
                    .iter()
                    .map(|id| tree.get(id).unwrap().as_ref().try_into().unwrap())
                    .collect(),
            ))
            .collect()
    }
    pub fn interfaces(
        &self,
        db: &'db dyn salsa::Database,
        tree: &'db codegen_sdk_common::tree::Tree<crate::cst::NodeTypes<'db>>,
    ) -> BTreeMap<String, Vec<&'db crate::cst::InterfaceDeclaration<'db>>> {
        self._interfaces(db)
            .iter()
            .map(|(k, v)| (
                k.clone(),
                v
                    .iter()
                    .map(|id| tree.get(id).unwrap().as_ref().try_into().unwrap())
                    .collect(),
            ))
            .collect()
    }
    pub fn methods(
        &self,
        db: &'db dyn salsa::Database,
        tree: &'db codegen_sdk_common::tree::Tree<crate::cst::NodeTypes<'db>>,
    ) -> BTreeMap<String, Vec<&'db crate::cst::AbstractMethodSignature<'db>>> {
        self._methods(db)
            .iter()
            .map(|(k, v)| (
                k.clone(),
                v
                    .iter()
                    .map(|id| tree.get(id).unwrap().as_ref().try_into().unwrap())
                    .collect(),
            ))
            .collect()
    }
    pub fn modules(
        &self,
        db: &'db dyn salsa::Database,
        tree: &'db codegen_sdk_common::tree::Tree<crate::cst::NodeTypes<'db>>,
    ) -> BTreeMap<String, Vec<&'db crate::cst::Module<'db>>> {
        self._modules(db)
            .iter()
            .map(|(k, v)| (
                k.clone(),
                v
                    .iter()
                    .map(|id| tree.get(id).unwrap().as_ref().try_into().unwrap())
                    .collect(),
            ))
            .collect()
    }
}
